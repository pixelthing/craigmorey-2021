{
  "version": "https://jsonfeed.org/version/1",
  "title": "pixelthing",
  "home_page_url": "https://example.com/",
  "feed_url": "https://example.com/feed/feed.json",
  "description": "Hi, I&#39;m Craig Morey, a data analyst &amp; developer from Gothenburg, Sweden (but originally from the UK). This is my place for collecting ramblings and curiosities, you&#39;re welcome/v√§lkomna!",
  "author": {
    "name": "Craig Morey",
    "url": "https://example.com/about-me/"
  },
  "items": [{
      "id": "https://example.com/posts/2021-06-getting-analytics-into-dev-team/",
      "url": "https://example.com/posts/2021-06-getting-analytics-into-dev-team/",
      "title": "Getting analytics into a dev sprint",
      "content_html": "<p>Web analytics want to have data layer pushes in the app. The web development team - whose job it is to make these changes - is under huge pressure, with their final sprints full of urgent fixes and loud stakeholders moving priorities around.</p>\n<p>So it's inevitable sometimes that crucial measurement points fall out of the sprint and don't get to launch day.</p>\n<p>This is so often the case in the web analytics business, that I'm not going to even address the &quot;were analytics a priority from the start&quot; question. Even if a KPIs, a measurement plan and  docs were agreed early in the process, it often comes down to the last two weeks to implement and QA analytics in the site for the simple reason that many of the crucial processes to measure are still being finalised at that stage.</p>\n<p>So how can we try to avoid this?</p>\n<h2 id=\"1.-patrons\">1. Patrons <a class=\"direct-link\" href=\"#1.-patrons\">#</a></h2>\n<p>The most obvious thing you can do is to have one of the of those <em>loud stakeholders</em> in the process on your side. This means having a champion, a patron that will fight for your position in sprint grooming sessions. Don't assume that because you have a chummy relationship with the developers or the product manager that that is enough - they are often just foot soldiers in the battle of the priority lists and their protestations are often weak sauce.</p>\n<blockquote>\n<p>They can take the fight for you</p>\n</blockquote>\n<p>What you ideally need are big guns with responsibilities for the success of the project. Your team needs to find the people with the business goals of a successful launch - the Customer Experience heads, the Business Analyst leads, the people who will be called upon to prove and report on a professional and successful product. They can take the fight for you with just a couple of emails or Slack messages into the right team leads.</p>\n<p>This is pitched as not only being able prove &amp; celebrate a successful launch, but also to spot the (just as common) less successful ones early on and be able to tweak the way to a better product. It's not a good look to realise something was a dud only when the quarterlies come in. Good web analytics are the best way to optimise a short-term negative result into a long-term positive one and keep everyone in the group looking good in front of their boss. The more people know this, the more they'll fight for you.</p>\n<h2 id=\"2.-relationships\">2. Relationships <a class=\"direct-link\" href=\"#2.-relationships\">#</a></h2>\n<p>Having said that you may need to go around the dev team, you also can't treat them like a service. If you have a poor relationship with the devs - you are not going to get the data you want.</p>\n<p>You need to be able to have the dev team on your side and let them know that you're working towards the same goals, whether it be business (ie, revenue, customer satisfaction) or personal (ie, doing the job right).</p>\n<p>Having experience yourself in website dev is not essential to talk to a dev team - although I admit I've found it very helpful (and I've leant on the &quot;don't hold back, I'm also a front-end dev&quot; line more than once). But by being able to show some knowledge of what single-page-application (SPA) frameworks are, what affects web performance, how to use CSS selectors or the &quot;critical page load path&quot; - or even just showing willing to meet in the middle by asking the dev team about such things - you'll get better response and results.</p>\n<p>The other thing that dev teams love is documentation. If you can create a doc about what dataLayer pushes you need, why and when they should occur (important - should an event happen when a button is clicked, or when the resulting dialog appears?), they'll have an instruction set and also a way of estimating work to add to a job ticket.</p>\n<blockquote>\n<p>Plus &quot;It's in the docs&quot; is the ultimate meeting shortener.</p>\n</blockquote>\n<p>In my experience, good implementation documentation is never worth dropping when time is tight - it helps you focus better on what you want, helps implementation happen, and can then be tweaked to show the resulting analytics details (eg GA events) that analysts can then use to understand what happened and why.</p>\n<p>What do you get out of all of this? A mutual respect helps the dev team know they aren't about to have jobs parachuted in that will block their sprint, slow the site down or make maintenance trickier. If you can work with them, they will much more likely assist you achieve your goals, and call on you when something changes in the future.</p>\n<p>Don't take this as a purely affirmative relationship, either. As a &quot;problem solver&quot;, I have a tendancy to bend over backwards, creating custom Tag Manager tags to fill gaps that a team is unwilling to implement in the simple dataLayer push. Remember that if a measurement point is not found worthy to prioritise in a dev sprint, it might also not be worth your time to find a workaround on the data engineering side either.</p>\n<p>And if a dev team is really unwilling to schedule analytics before a launch, sometimes the lack of data to present to their bosses is the only thing that will get them to prioritise it in future sprints. As a colleague succinctly put it, &quot;sometimes only a little pain works&quot;.</p>\n<h2 id=\"3.-negotiation\">3. Negotiation <a class=\"direct-link\" href=\"#3.-negotiation\">#</a></h2>\n<p>When writing an implementation doc for a team, you'll rarely get it right the first time. Sometimes your mental model is different from the business model (or the app model), sometimes what you want is just not possible without lots of extra development work.</p>\n<p>Being pragmatic means starting with an ideal situtaion, and then negotiating with the dev team to come to an agreement that leaves everyone satisfied.</p>\n<p>To do that, you need to set expectations - state early on that you'll get some docs together, but that they're just <em>&quot;version one&quot;</em> and they'll be plenty of opportunity to revise them once the dev team has looked over them. They might decide that they need to negotiate the docs <em>before</em> sprint grooming (ie, they may feel the need to make serious changes that effect estimations). Or they might <em>after</em> a sprint has started (ie, it looks like just small changes need checking over) - so the negotiation might be with just the devs or their project managers too if it affects scheduling.</p>\n<blockquote>\n<p>Negotiation has to take place in good faith</p>\n</blockquote>\n<p>Negotiation has to take place in good faith, so if the dev team doesn't seem to understand why some measurements are requiring their time to work on, or web analytics don't believe that the dev team's work will give reliable readings, maybe you need a third party such as a product manager or team lead in the conversation anyway.</p>\n<p>Starting with creating a &quot;perfect world&quot; instrumentation doc - where the ideal analytics events are listed without thought about the implemetation effort - is not just a theoretical starting point. Sometimes its easy to overthink what may be hard for the dev team to build, and miss out on potential signals that could be useful. As long as the dev team know it's starting at the top end of requirements and you're flexible, it's rarely a problem to start this way.</p>\n<hr>\n<p>If you need a few points to give away as bargaining chips, try these:</p>\n<ul>\n<li>Prioritise your requests. Don't compromise on contributions to KPIs, but be prepared to lose or greatly refactor minor measure-points.</li>\n<li>In fact, where some interesting actions take place in the site that we don't intend to initially report on, add them in, but be prepared to lose them. This isn't only for some evil bargaining reason, but more future-proofing - we all know instances of UX in websites that suddenly become an unexpected priority for management, and having existing hooks ready to measure without hacks or panic are often a godsend.</li>\n<li>If there are any states you need in the dataLayer that don't change very often, get them set them when the web app starts, instead of every time you make a dataLayer push. It'll remain in the dataLayer as long as the page is loaded anyway. And the web app then doesn't need to find a state unrelated to a running function every time it is run. For instance:</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// set this state once in the dataLayer early</span><br>dataLayer<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">{</span><br>  <span class=\"token string\">'event'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'app.setup'</span><span class=\"token punctuation\">,</span><br>  <span class=\"token string\">'layout'</span><span class=\"token operator\">:</span> <span class=\"token string\">'mobile'</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// ...instead of asking the app to find the layout state each time an event occurs:</span><br>dataLayer<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">{</span><br>  <span class=\"token string\">'event'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'app.addToBasket'</span><span class=\"token punctuation\">,</span><br>  <span class=\"token string\">'value'</span> <span class=\"token operator\">:</span> <span class=\"token number\">99.99</span><span class=\"token punctuation\">,</span><br>  <span class=\"token string\">'layout'</span><span class=\"token operator\">:</span> <span class=\"token string\">'mobile'</span><br><span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Be flexible about swapping between asking for dataLayer pushes and markup changes. dataLayer pushes are essential for state changes and complex states with lots of information, but they often need devs to create new detailed methods where they never existed before. If you're looking for something simpler, like notification of a click with a small amount of data, asking devs to add a data attribute to their HTML component (and attaching a GTM trigger to that css selector) is often a much quicker task for devs to complete. You could even create generic markup-hooks that mean the dev team's workload is simpler, and eliminates yours [see article here]. For instance:</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// you can compromise on asking for a simple dataLayer push like:</span><br>dataLayer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>  <span class=\"token string\">'event'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'cta1.click'</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- ...by instead asking for a markup change - normally quicker to implement by a dev team --></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/promo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-track-click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cta1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Click me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br><span class=\"token comment\">&lt;!-- now attach a trigger to the CSS selector [data-track-click=\"cta1\"] --></span></code></pre>\n<ul>\n<li>Sometimes you need to listen to how the devs have created the app to find the most pragmatic solution. If you want to capture what's been updated in a basket, but the app just returns the latest basket object (with no idication what's changed), you might consider diffing the object [see article here] to understand whats changed. It might remove a lot of potential dev time that you could then ask to put towards other things in your list.</li>\n<li>Labelling values is always deceptively tricky. If you want a customer type in the dataLayer as <code>B2B</code>, but the app code calls the same thing <code>business</code>, you might want to use the devs description instead of yours, it removes the need for them to write dictionary lookups, and definitely reduces exposure to bugs (especially as new values could be added in the future that your schema may not deal with). This applies to naming both keys and values in the dataLayer - try and sync them with something existing instead of creating new paradigms.</li>\n<li>On occasion, when an idea really didn't get any traction with sprint grooming, I've built complex solutions purely in custom tags that monitor &amp; report app state from markup &amp; clicks without any assistance from the dev team. After gathering data and displaying the benefits, I've then asked again for time to implement dataLayer pushes (much more reliable). It's not ideal - but sometimes you need to show how tasty the result is before everyone is convinced.</li>\n<li>Ask if there are any things that devs would like to see in a dashboard (eg, what browsers, devices or resolutions use the app), you could use it to gain trust.</li>\n</ul>\n<p>Try to make it clear what you're compromising on, none of your decisions are free of cost and others should be aware of that. And explain why you want each point of data, it often overlaps with what the dev team also want to know, and helps contextualize how much effort it's worth.</p>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>If a lot of the above sounds like compromising, you'd be right. If it sounds a lot like business school politics 101 - you <em>might</em> be right. But it doesn't need to be so cynical, if we're talking about wanting to get the job done <em>or</em> having respect for your co-workers, there's no reason those two beliefs can't be held simultaneously.</p>\n<p>What we're trying to do is to develop communications that don't just create short-term success, but long-term effectiveness - the more that both web analytics and web dev respect each other, the better the data will be to come from the products. And that was always the goal.</p>\n",
      "date_published": "2021-05-31T22:00:00+02:00"
    },{
      "id": "https://example.com/posts/2021-04-generic-gtm-click-tracking/",
      "url": "https://example.com/posts/2021-04-generic-gtm-click-tracking/",
      "title": "Generic click tracking in GTM",
      "content_html": "<p>The larger a Google Tag Manager (GTM) container becomes, the more you realise that many tags, triggers and variables are doing roughly the same job. So it's worthwhile refactoring some of them away into a few generic tags that make your life easier.</p>\n<p>This article details one such technique to reduce most of your click tracking to a simple reusable pattern, so all it takes is a small piece of markup to start collecting data. At Polestar, we use it on reusable React components, so that devs and editors have the ability to roll them out without needing to do any work in GTM at all.</p>\n<h2 id=\"1.-the-markup\">1. The markup <a class=\"direct-link\" href=\"#1.-the-markup\">#</a></h2>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">data-track</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>click:MyCategory:MyLabel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>arrow-icon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Click me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>The markup is just a data attribute of the element thats clickable/tappable. Here its a button, but it could just as easily be an anchor, input or div (please don't). The markup inside is incidental, it's just here to remind you that markup is not always clean, and that javascript sees the actual target element you click, which might be a child of the element you <em>think</em> you're clicking (we'll cover that later).</p>\n<p>I don't like using ids, aria or classes to target GTM triggers - or even existing data attributes like <code>data-tmpl</code>. They're too easily refactored away by some future front-end dev for perfectly valid reasons - and then you're left wondering where the data went. Instead, I like data attributes that clearly separate themselves in purpose from other markup, that way anyone looking to tweak or re-write the code has a good chance of retaining the analytics.</p>\n<p>The attribute value is a colon separated list of:</p>\n<ul>\n<li>event action</li>\n<li>event category</li>\n<li>event label</li>\n</ul>\n<p>This is tailored towards Google Universal Analytics, but could just as easily be consumed by GA4 hit event tags.</p>\n<p>the action always starts with &quot;click&quot; (but could, for instance, be <code>click_tab</code>), but the other two can be set to whatever you like. And there's no reason you shouldn't add event value, or in-tag text substitutions (see &quot;extending the idea&quot; later).</p>\n<p>That's it. Easy enough for any developer to drop into an HTML component. All you need now are the GTM tags/triggers/vars to consume it.</p>\n<h2 id=\"2.-the-trigger\">2. The trigger <a class=\"direct-link\" href=\"#2.-the-trigger\">#</a></h2>\n<p>The trigger is an element click with a couple of simple CSS selectors, comma separated.</p>\n<pre class=\"language-css\"><code class=\"language-css\">[data-track^=<span class=\"token string\">\"click\"</span>]<span class=\"token punctuation\">,</span>[data-track^=<span class=\"token string\">\"click\"</span>] *</code></pre>\n<p>The first part is a CSS attribute selector for the click element we labelled in the markup, the second is to catch any clicks on any child elements inside the first element, such as icons, text wrappers and so on.</p>\n<h2 id=\"3.-the-event-variables\">3. The event variables <a class=\"direct-link\" href=\"#3.-the-event-variables\">#</a></h2>\n<p>You remember that we said their were three parts to the attribute value in the markup? To capture each one of those, we need three GTM custom JS variables. Below is the one to collect the event category:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">// the try/catch is only to stop any browser-based bugs from causing disruptions to the site. It's also helpful for debugging</span><br>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// quick exit - if this variable is not called for a click event, stop here</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>Event<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">// quick exit - if this variable is not called for a click event on the correct element, stop here (same as above, but the first quick exit needs a tiny amount less time/CPU as it doesn't need to do do the querySelector - #webperf)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>Click Element<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-track^=\"click\"],[data-track^=\"click\"] *'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">var</span> clickRoot<span class=\"token punctuation\">,</span>labelComplete<span class=\"token punctuation\">,</span>labelNode<span class=\"token punctuation\">,</span>labelTranslated<span class=\"token punctuation\">;</span><br>    <span class=\"token comment\">// clickRoot assumes you might have clicked on a child element of the button that we want to focus on. So it uses a helper function to step back up the DOM tree to find it.</span><br>    <span class=\"token comment\">// This helper function could be replaced by the .closest() method, but that is only supported in ES6, so won't compile in GTM (which only supports ES5), so think of this helper function as a polyfill.</span><br>    <span class=\"token comment\">// Read the Simo Ahava article on this helper function (link in description)</span><br>    clickRoot <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token constant\">ENV</span> <span class=\"token operator\">-</span> helper <span class=\"token keyword\">function</span> <span class=\"token operator\">-</span> find closest<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>Click Element<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token string\">'[data-track^=\"click:\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>clickRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">return</span> <span class=\"token string\">'unknown'</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">// now get the value of the attribute</span><br>    labelComplete <span class=\"token operator\">=</span> clickRoot<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-track'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token comment\">// and finally split it into an array and get the second (index1) node</span><br>    labelNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>labelComplete <span class=\"token operator\">?</span> labelComplete<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> labelNode<span class=\"token punctuation\">;</span><br><br>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ENV - generic click tracking - category - var'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>Event<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br></code></pre>\n<p>Similar GTM variables wil be needed for action and label - the only difference will be the number in the <code>labelNode</code> line, <code>[0]</code> for the action, <code>[2]</code> for the label.</p>\n<p>Note this code uses a helper function that needs it's own GTM var - this is explained in detail in this <a href=\"https://www.google.se/amp/s/www.simoahava.com/amp/analytics/capturing-the-correct-element-in-google-tag-manager/\">Simo Ahava article</a>.</p>\n<p>Also note that there are a couple of &quot;quick exits&quot; at the start of the function. GTM variables are evaluated <em>every single time a event occurs in GTM</em>, so I find it best to ruthlessly limit what events get beyond the first couple of lines, to reduce the amount of uneccessary CPU cycles spent.</p>\n<h2 id=\"4.-putting-it-together-in-a-tag\">4. Putting it together in a tag <a class=\"direct-link\" href=\"#4.-putting-it-together-in-a-tag\">#</a></h2>\n<p>Now we have a triggers, and values to use in the form of GTM variables, we can can build the tag to send data to GA. As mentioned, this is a Universal Analytics tag, but it could easily be a GA4 hit event too.</p>\n<p>Now you have this tag set up, you might never have to make another tag again to track a button click...</p>\n<h2 id=\"extending-the-idea\">Extending the idea <a class=\"direct-link\" href=\"#extending-the-idea\">#</a></h2>\n<p>At Polestar we've used variations on this technique to create a suite of generic trackers, from CTA clicks to email and download clicks.</p>\n<p>It means that the need to build many simple tracking tasks can be decoupled from the business of building a large, multi-team site. A dev team can build a new landing page, drop in and label a standard CTA component, and the first we in Web Analytics know about it is when the data starts coming in.</p>\n<p>We've extended it in several ways, for instance by adding text substitution to the values that can inject dataLayer values. This way, we can have a dumb piece of markup such as:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">data-track</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>click:[MODEL]_config:blue_btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>... that substitutes <code>[MODEL]</code> with the car model that is held in the dataLayer model. In the above example we receive a GA event category of <code>ps2_config</code>.</p>\n<p>This sort of substitution can be done by just replacing the <code>return</code> line in the custom variable code with a few more lines of code:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// this block of code replaces the \"return\" line in any of the GTM variables where you want substitution.</span><br>labelTranslated <span class=\"token operator\">=</span> labelNode<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>labelNode<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[MODEL]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">// below we swap [MODEL] with a dataLayer value held in a GTM variable.</span><br>  labelTranslated <span class=\"token operator\">=</span> labelNode<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[MODEL]'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token constant\">ENV</span> <span class=\"token operator\">-</span> car <span class=\"token function\">model</span> <span class=\"token punctuation\">(</span>short<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">return</span> labelTranslated<span class=\"token punctuation\">;</span><br></code></pre>\n<p>I'm sure you can think of potential uses for similar substitutions.</p>\n",
      "date_published": "2021-04-23T22:00:00+02:00"
    },{
      "id": "https://example.com/posts/2020-12-ipad-webdev20/",
      "url": "https://example.com/posts/2020-12-ipad-webdev20/",
      "title": "Web dev with an iPad in 2020",
      "content_html": "<p>At this time of the year I normally go deep on what‚Äôs changed if you‚Äôre a front-end web developer with an iPad. This year, I‚Äôm not going to do that, largely because I don‚Äôt have a set-up that‚Äôs representative of a 2020 iPad Pro (I have a 10.5‚Äù), but also because this year of all years, I think I‚Äôm justified in taking time off over the christmas holiday and not spending it explaining every possible workflow.</p>\n<p>But 2020 - despite feeling like a flat curve of time - has been surprisingly busy in the iPad world. Here are some highlights that effect you as a developer with an iPad in the hand.</p>\n<h3 id=\"ios13.4-%26-magic-keyboard\">iOS13.4 &amp; Magic keyboard <a class=\"direct-link\" href=\"#ios13.4-%26-magic-keyboard\">#</a></h3>\n<p>I know that iOS14.4 is already appearing as a Public beta, but it was only back in March that the previous point4 upgrade dropped with the largest change for Pro iPads since the pencil. We received pointer support and (eventually) the Magic keyboard, which further blurred the lines between MacBook and iPad, both in functionality, and - for some - less favourably in portability.</p>\n<blockquote>\n<p>Text workers such as us developers could stop smudging our fingers at a screen, hoping for accurate text selection</p>\n</blockquote>\n<p>Instead, we could finally position a cursor accurately. Plus the magic keyboard was a quantum leap over the previous fabric design (if you don‚Äôt mind the reduction in crumb and liquid protection), and came with a killer trackpad built in, on top of a unique design.</p>\n<p>The innovative cursor morphing felt very iOS, but it had split reviews. Apps supported the new pointer in slightly esoteric ways - not surprising considering the many ways text selection has worked in only a short period of time on this platform. But I don‚Äôt doubt that this is the single biggest - and most unexpected - Pro iPad upgrade this year.</p>\n<h3 id=\"m1-macs\">M1 Macs <a class=\"direct-link\" href=\"#m1-macs\">#</a></h3>\n<p>The M1 is a watershed for Macintosh. But it‚Äôs also probably a turning point for iPads. Will the next iPad Pro have an under-clocked M1 8GB under an ‚ÄúA14X‚Äù moniker? If future Macs get a touch screen - seeing as they already run iOS apps - do MacBooks get to be an iPad Pro Pro? Will having M1 compiled pro apps on MacOS increase the amount that make the jump to iOS?</p>\n<p><strong>But the big point this makes is that MacOS isn‚Äôt going anywhere</strong>, and the Mac‚Äôs positioning as ‚Äúthe truck‚Äù (in Steve Jobs parlance) compared to iOS‚Äô ‚Äúcar‚Äù is not changing. M1 Macs finally made it clear that Apple is never going to ride to the rescue and suddenly make the iPad an open, developer-friendly platform - they already have a roadmapped platform for that. So this is it, some small incremental improvements in the environment and ow volume third party apps are what you‚Äôre getting. iPadOS is finally becoming a neat secondary dev platform, but forget the idea that it could ever be anything more.</p>\n<p>However, could there be a meeting point in five years where the two OS‚Äô merge (in some sense), even if the hardware stays on two tracks? Well, the M1 definitely makes this more - not less - possible.</p>\n<h3 id=\"ipad-air-4th-gen\">iPad Air 4th gen <a class=\"direct-link\" href=\"#ipad-air-4th-gen\">#</a></h3>\n<p>All agreed that the iPad Pro 2020 was a very mild tweak of the two year old 2018 Pro. So the big upgrade in 2020 was the iPad Air. If you can live without the 120Hz screen and FaceID, it‚Äôs basically the 2020 Pro, but 40% quicker in single core and only 10% slower in multi-core. And you could throw in another basic iPad on top before you get to the price of current Pro.</p>\n<p>If you can find an original 2018 Pro for a good price - and there‚Äôs still a lot out there - it‚Äôs a much closer run thing. But it‚Äôs a good sign that the Pro experience is continuing to move down the range, and that the 2021 Pro has got to raise the bar again to justify its price.</p>\n<h3 id=\"code\">Code <a class=\"direct-link\" href=\"#code\">#</a></h3>\n<p>This is the app surprise of the year for me. It started as a simple enough little playground project - lets take the interface of VSCode and see if it can be reproduced in SwiftUI. But with continual updates, it has progressed in nine months to the point that it‚Äôs pretty damned close in core functionality to it‚Äôs role model. It has intellisense style hints &amp; suggestions, a command palette, and code running options including node.js and python. There are still some problems that need attention, but this could be the star of next year‚Äôs IDE crowd at this rate - it‚Äôs certainly got my attention.</p>\n<h3 id=\"playjs-2.0\">PlayJS 2.0 <a class=\"direct-link\" href=\"#playjs-2.0\">#</a></h3>\n<p>Play.js 1.0 was innovative and quirky, but more importantly was the only way you could build a node.js or React project on iOS. This year, a complete rewrite resulted in v2.0, ironing out a lot of the quirks and adding a whole lot of functionality. Between enabling vue.js and next.js projects, to having the best devtools outside of inspect browser, Play.js has grown beyond expectations in 2020. Every aspect has improved, but the biggest thing you notice is that it fits together better, and looks and feels like a top tier iOS app. I even like that it has in-app optional tip payment - if you buy and use these apps over years, there‚Äôs no better way to say thanks for the updates.</p>\n<h3 id=\"the-apple-store-small-business-program\">The Apple store small business program <a class=\"direct-link\" href=\"#the-apple-store-small-business-program\">#</a></h3>\n<p>Almost all the apps mentioned in this article are from one-person or small-team developers. A large amount of these teams only build apps as a side-job, because the volumes just don‚Äôt make full-time app development financially viable. With the advent of the small business program (which reduces Apple‚Äôs cut from 30% to 15%), the developers effectively get a 20% pay rise. That might not make them rich, but it might mean it‚Äôs worthwhile to carry on maintaining these apps, or even devote more time to them - and surprise us all with the results.</p>\n<h2 id=\"honourable-mentions\">Honourable mentions <a class=\"direct-link\" href=\"#honourable-mentions\">#</a></h2>\n<h3 id=\"working-copy\">Working Copy <a class=\"direct-link\" href=\"#working-copy\">#</a></h3>\n<p>Still the hub of any source control project on iOS, this year the git client/IDE gained loads of functionality including stashing, large file support, direct file editing in Textastic, and a reliable way of running background servers (yay).</p>\n<h3 id=\"shellfish\">Shellfish <a class=\"direct-link\" href=\"#shellfish\">#</a></h3>\n<p>The other essential app from Andreas, author of Working Copy, Shellfish pivoted in 2020 from being ‚Äújust‚Äù an invaluable file provider for ssh and sftp connections into also being one of the most extraordinary ssh clients on any platform. Drag-n-drop files from a shell? Shellfish can do that.</p>\n<h3 id=\"textastic\">Textastic <a class=\"direct-link\" href=\"#textastic\">#</a></h3>\n<p>Textastic remains the best all round IDE on iPadOS, it‚Äôs mature, well integrated and has just enough functionality to deal with most types of work, without having too much to get in the way. This year it can now work in multiple windows and became even closer integrated with Working Copy.</p>\n<h3 id=\"serveeditor\">Serveeditor <a class=\"direct-link\" href=\"#serveeditor\">#</a></h3>\n<p>Last year I got deep into installing VSCode onto a remote server to use it as an IDE on iPad, and since then someone has made it exactly this process into a Native (well, ish) app, including a subscription to the server so you don‚Äôt need to do a thing. And it works pretty well. Not all of the problems with using a remote application in a local setting are fixed - or could be - but at it‚Äôs core it really is actual VSCode running on an iPad, and that‚Äôs impressive.</p>\n<h3 id=\"inspect-browser\">Inspect browser <a class=\"direct-link\" href=\"#inspect-browser\">#</a></h3>\n<p>Still the best option for web devtools on iOS, and still coming out with additional functionality and interface updates. Building an entire browser just so that you can add devtools to it is an insane amount of work that you undertake only if you didn‚Äôt realise how much work was involved when you started - support them as much as you can so that they continue on this crazy quest that is so essential to any web dev on iPadOS.</p>\n<h2 id=\"what-we-still-need\">What we still need <a class=\"direct-link\" href=\"#what-we-still-need\">#</a></h2>\n<p>It seems almost unbelievable to me that only a couple of years ago, I was clutching for the basic apps to do some part of my job on an iPad. Now almost all of those holes have been filled.</p>\n<p>It‚Äôs at a point where the solving of the major blockages just throws iPadOS‚Äô fundamental workflow quirks into sharp relief. And the main one is the the same one I had three years ago;</p>\n<p><strong><em>iOS is ruthless at killing background processes.</em></strong></p>\n<p>iOS works quite differently from MacOS - it was built for limited CPU, limited memory and minimal battery drain. As such, iOS is built around being super efficient at saving an app state to storage when you leave it for more than a few minutes, then re-hydrating it when you return - so quickly that you barely notice it. This works great for your native photo editing app, but it‚Äôs not so good for many electron or webview-based apps, and just impossible for running dev servers unless you keep them in the foreground continually.</p>\n<blockquote>\n<p>We need to have an API that allows at least some part of them to run in the background.</p>\n</blockquote>\n<p>If we want to run dev servers or node toolchains in apps like Play.js or Working Copy on an iPad, we need to have an API that allows at least some part of them to run in the background. Hacks like pinging for location to prevent the app being killed must be replaced with a better solution. Music apps like Spotify have had an exception to allow background processing for years, and we need it now.</p>\n<p>The other solution is the least talked about iPad Pro update of 2020 - 6GB of RAM. Even with the 4GB on my 10.5‚Äù, flicking between heavy web apps has tabs reloading because they were purged from memory after only minutes (thereby losing scroll position, page state, text caret position and even login tokens). More memory has always been the big difference between consumer and Pro computers - iPads are no exception - I‚Äôd love to see 8GB in the 2021 Pro.</p>\n<hr>\n<p>Of course we could still do with a real command line. A sandboxed environment - possibly virtualised now that iPadOS allows that (and the M1 even has accelerators for it). Come on Apple, ISH and aShell show the way - let me run straight nodeJS on your Pro devices.</p>\n<p>Just to put the cherry on the top, Docker, Homebrew and countless other packages are being compiled at this moment for the M1 - which is essentially an iOS A14 chip with some extras. If Apple just provided the iOS sandbox for them to play in...</p>\n<hr>\n<p>Devtools are absolutely essential to the web development process and it‚Äôs still not possible in Safari on iPad unless you connect up to a Mac. Apple don‚Äôt look like they‚Äôre going to suddenly include devtools in Safari on iPadOS - so we have either the do it ourself option with apps such as Inspect Browser, or the hope that Apple will eventually allow other browser engines onto the platform, so that big vendors such as Google or Firefox have the opportunity to fill the gap. Even that is a hope on top of a hope (Chrome doesn‚Äôt even support devtools on Android, even if it does on ChromeOS), but I still feel that Apple will have their hand forced by regulators to open up to other browsers at some point.</p>\n<hr>\n<p>The 12.9‚Äù iPad with Magic keyboard is the same weight as a MacBook Pro. The 11‚Äù is much more portable but screen space is really tight to work off for any period. What I want is to have real monitor spanning in iOS, not the half strength support we currently have. With pointer support in iOS, we don‚Äôt need touch monitors, in fact any USB3 screen would do. We know the GPU can do it. We just need the support in iOS.</p>\n<p>A super compact, powerful computer on the go, and a large screen experience at the desktop.</p>\n<hr>\n<p>Have a good 2021...</p>\n",
      "date_published": "2020-12-29T23:00:00+01:00"
    },{
      "id": "https://example.com/posts/2020-08-getting-critical-data-noticed/",
      "url": "https://example.com/posts/2020-08-getting-critical-data-noticed/",
      "title": "Getting critical data noticed",
      "content_html": "<p>It feels like we‚Äôve crossed a threshold. Businesses (and the general public) are increasingly calling for more data, and for it to be presented in a smart and pedagogic way.</p>\n<p>But we are living in a seriously distracted time. Knowing we need to be looking at data is very different from having the trigger to actually do it. Too often, the idea that we need to check on the progress of a chart is so far down the list of shiny new things to look at that it remains a noble effort, like signing up for the gym but never finding the time to go.</p>\n<p>How do we wedge business critical data into this distraction disaster zone, especially when the real insight from the data often can‚Äôt be explained in a 140 character chunk?</p>\n<p><em>I thought this was a solved problem</em>. A well designed physical dashboard (eg a large wall display) in full view of the team could provide intuitive visuals to let people spot a ‚Äúwhat‚Äù, and then understand the ‚Äúwhy‚Äù in the data.</p>\n<p>And then came COVID, and suddenly the people who would see these dashboards were no longer sitting in the same room.</p>\n<p>We already know that just sending a URL out to people is not enough ‚Äî it won‚Äôt be looked at ‚Äî at least enough to be worthwhile, so how do we solve this?</p>\n<hr>\n<p>When you (eventually) go back to the cinema to watch a two hour epic, you will probably decide to go whilst watching a two minute trailer. And you probably only watched that trailer because you saw a poster or a twenty second advert. The cinema trip wouldn‚Äôt happen without the trailer or poster, and you might see twenty different posters a day, but the one that attracts you won‚Äôt satisfy your appetite for the film on its own.</p>\n<p>This is the flow that we‚Äôve got to get ourselves into, a sort of a system 1 (‚Äúintuitive‚Äù) thinking pattern to lead into system 2 (cognitive thought) when it‚Äôs required.</p>\n<p>Let‚Äôs call these two ends of the chain ‚Äú<strong>the bite</strong>‚Äù, and ‚Äú<strong>the body</strong>‚Äù.</p>\n<p>‚Äú<strong>The body</strong>‚Äù is a variant on the dashboard we build already, it should be giving multiple indicators and insights to form an opinion or decision. But it differs in two ways to what we would usually build. Firstly it <em>can</em> be found at the end of a URL/link, because ‚Äúthe bite‚Äù does the work of attracting interest to it. Secondly, because it doesn‚Äôt need to do double-duty of attracting attention <em>and</em> serving up depth, it can be re-configured assuming the viewer already has a view on the data when they start looking into it. In an ideal world, you could have variants of dashboard for different analysis, depending on the link in message of ‚Äúthe bite‚Äù.</p>\n<p>Image for post<br>\nchartyios.app in an iOS14 widget</p>\n<p>‚Äú<strong>The bite</strong>‚Äù is more interesting, because there are so many options available to us. Let‚Äôs talk about the medium before we get into the message.</p>\n<p>Push notifications (SMS, email, adhoc Slack messages) have baggage. They have a very important place in alerting people to conditions that need immediate attention, but if you use them as a way to simply update people, they quickly become ignored. Preference and psychology play a part here ‚Äî I tried automating daily SMS updates and it fell flat, but sending a daily screenshot of a simple dashboard into a Slack channel provided a team with some really good context for their daily conversations.</p>\n<p>However, my current favourite option is with smartphone home screen widgets. Living in an iOS centric country, I missed out on creating these in Android, but now I‚Äôm fully onboard with the upcoming iOS14 update, testing it with some third-party software that will launch alongside the OS (Scriptable, Charty, WidgetPack) to present simple data on a user‚Äôs home screen amongst their regular icons.</p>\n<blockquote>\n<p>the audience already chooses to look at this screen an average of 58 times a day...</p>\n</blockquote>\n<p>This approach has multiple advantages. The first is this the audience already <em>chooses</em> to look at this screen an average of 58 times a day. Who needs a daily push update, when the viewer is already looking at these pixels several times an hour. And that means viewers start to see realtime patterns (for instance daily routines in global markets), leading to deeper insights and helping to spot breaks in the expected results.</p>\n<p>Our problem will eventually be more competition with distraction ‚Äî when your viewers have shiny home screen widgets for other data (screen time, health data, etc), will your data widget be pushed onto the third screen that never gets viewed?</p>\n<p>If that‚Äôs the medium, what about the message? First we need to get attention, and this is where the format of a widget is more useful than a notification, because the background colour can show at a glance it‚Äôs worth noticing or ignoring. This is more crucial than any KPI displayed, because viewers need to be given permission to ignore data, so that when it‚Äôs important they are more disposed to notice it.</p>\n<p>In the foreground, we‚Äôve found that a single KPI with some sort of comparison context is most useful. For example, ‚Äúsales today so far‚Äù vs ‚Äúsales at this time yesterday‚Äù. That seems to give users enough context to decide if the widget background colour represents a significant change, worthy of investigation. Going further by clicking from the widget to a dashboard is often not necessary, positive outcomes are often taken at face value, whereas unusually negative results tend to make viewers want to know ‚Äúwhy‚Äù.</p>\n<p>In tests, widgets also turned out to be the best goal tracker we had, viewers can check them quickly, as much as they want, wherever they are, to see if their preferred KPI has hit target (useful in competitive sales environments). This also means the more complex dashboards (‚Äúthe body‚Äù) are under much less load.</p>\n<p>Very soon you will see lots of screenshots of these widgets in social media as a shorthand to a humblebrag.</p>\n<figure class=\"fig-column\">\n  <picture>\n    <img src=\"../../img/2020-08-scriptable1.jpeg\" />\n  </picture>\n  <figcaption>\n    JS script running in a scriptable.app iOS14 widget\n  </figcaption>\n</figure>\n<hr>\n<p>Just like the cinema example earlier, you could have more constituent parts than just two ‚Äî you might have ‚Äúthe bite‚Äù leading to an in-app overview that helps you decide if it‚Äôs just an anomaly, or needs further investigation in a third dashboard. Just so long as the user gets the right messages <em>promptly</em> that leads to the right outcome.</p>\n<p>What we‚Äôre trying to do is to bring data to the screens the audience is <em>already looking at</em> ‚Äî instead of forcing the audience to <em>journey</em> to the data. By doing this, we could start to not only deliver on the idea of ‚Äúmore data‚Äù, but to deliver a non-intrusive way of actually getting it noticed.</p>\n<p>The results of data getting regular attention will lead to it being much, much more useful.</p>\n",
      "date_published": "2020-08-19T22:00:00+02:00"
    },{
      "id": "https://example.com/posts/2020-05-ipados14-wish-list-for-web-devs/",
      "url": "https://example.com/posts/2020-05-ipados14-wish-list-for-web-devs/",
      "title": "iPadOS14 wish list for web devs",
      "content_html": "<p>Historically, I‚Äôve had a rotten track record for predicting future features. And everyone has their take for iPadOS14 ‚Äî many focusing on the UI or fabled iPad Pro apps like Xcode or Logic Pro. As a web/data developer with iPads in the hands of various family members, I guess I have a slightly different list of wishes:</p>\n<h2 id=\"what-would-make-ipados-a-good-web-dev-platform\">What would make iPadOS a good web dev platform <a class=\"direct-link\" href=\"#what-would-make-ipados-a-good-web-dev-platform\">#</a></h2>\n<ul>\n<li>Real multi-monitor support. With pointer now implemented in iPadOS, all the pieces are in place. We don‚Äôt need desktop spanning, just the ability to adjust where the cursor leaves one screen and appears on another, so we can drop apps across a wider canvas of screens. A 11&quot; in my bag and a 27&quot; on the desktop ‚Äî but without the compromises that currently means.</li>\n<li>More classes of app that are allowed to run in the background. This is so very important for web dev ‚Äî we desperately need web servers and compilers to run reliably in the background without requiring hacks like building location awareness into apps to fool the OS into allowing it.</li>\n<li>A first party sand-boxed (virtualised?) command line. Actually, it‚Äôs not as impossible as it sounds, ISH does this already, but wow, Node/NPM compatibility would be nice.</li>\n<li>Other web browser engines to be blessed for use in iOS (Chromium/Firefox), or alternatively Safari web inspector to make the jump to iPadOS. Top level devtools are desperately needed on iOS.</li>\n<li>An onscreen keyboard that was tailored to coding would be amazing. Tempted to create one myself.</li>\n<li>Microsoft to walk on stage at the keynote and announce VSCode for iPad (or Panic to announce Nova for iPad ‚Äî either would do!)</li>\n<li>Slack to similarly come on stage and announce video conferencing and screen sharing is coming to iOS.</li>\n</ul>\n<h2 id=\"and-also%E2%80%A6\">And also‚Ä¶ <a class=\"direct-link\" href=\"#and-also%E2%80%A6\">#</a></h2>\n<ul>\n<li>Shipping with multi window &amp; gestures off by default. 80% of the audience don‚Äôt care &amp; don‚Äôt like it, but want the old, simple iPad experience. The remaining 20% of us want so much more from iPadOS. We can find the settings to turn on those super powers.</li>\n<li>Data back-up options (even if it‚Äôs limited to just time machine).</li>\n<li>Of course, tweaks for more coherent multi-tasking. There have been some amazing demos recently online tying to pull the concepts together and make them discoverable, and I‚Äôd take any of them.</li>\n<li>Multi user ‚Äî a stretch I know and it would mean a very long beta. But really, not many in reality can afford a device per child.</li>\n<li>Recognising hardware keyboards and allowing different settings for them, or shortcuts access to swapping keyboard layouts (non-english typists would appreciate this).</li>\n<li>Having some control over audio ‚Äî like being able choose the mic at OS level. Handy for these WFH times, and also podcasting.</li>\n</ul>\n",
      "date_published": "2020-05-23T22:00:00+02:00"
    },{
      "id": "https://example.com/posts/2020-05-making-gtm-better/",
      "url": "https://example.com/posts/2020-05-making-gtm-better/",
      "title": "Making GTM better",
      "content_html": "<p>Google Tag Manager is a strange beast. Its purpose is essentially abstraction -- to provide a layer between a website and multiple types of site measurement. It‚Äôs been used brilliantly, loosely, badly and plain-old abusively in many cases, but it is trying to make it possible for non-developers to (for instance) be able to quickly set-up Google Analytics tracking on a button, as well as experts to set up more in-depth measurement. But like all interfaces that try and simplify things without losing complex functionality, it can quickly dissolve into very domain specific language that seems unintelligible from the outside.</p>\n<p>And that‚Äôs where I am at the moment, using GTM to try and build logical tags of reliable data from horribly un-semantic, React-built spaghetti-code web sites that needs lots of custom JS in GTM to interpret them.</p>\n<p>Because I was a front-end developer in a previous life with some UX background, I understand that no UI/UX is perfect and there is always more that you learn the more you fix it. I‚Äôd like to think I could make a few suggestions to the GTM team at Google that would make my day (and hopefully yours) much easier:</p>\n<p>Having a &quot;preview&quot; button in a tag/trigger/var panel (plus a &quot;save&quot; button in the expanded code panel) would save a huge amount of time in the round trip of trying to build or debug something (see below). The current roundtrip for doing this is an unnecessary cognitive load, I often get back to the tagged page and wonder what it was I changed because of all the steps I‚Äôd taken since I‚Äôd made the change. Plus it‚Äôs a huge time-sink when you multiply it by the many, many times a day you have to carry out a round trip. Imagine a button saving 30 minutes off your day, every day -- that would be worth celebrating.</p>\n<p>The edit-preview-edit round trip (sorry, you‚Äôll need sound -- haven‚Äôt captioned it yet)</p>\n<p>Similar to the above -- I really like the orange banner that reminds me I‚Äôm in preview mode -- it‚Äôs good use of &quot;ugly&quot; UX (forgive me -- I mean &quot;in your face&quot; is not often pretty, but it‚Äôs useful). But I can‚Äôt count how many times I have been looking at a tagged page and have been confused as to why some tag isn‚Äôt working, before wondering if I actually refreshed the preview state or not. I‚Äôd suggest making the preview button and refresh link aware of the status of updates, as below:</p>\n<p>The preview button and preview refresh link if no changes since the last refresh.</p>\n<p>Suggested preview button and refresh link style if updates have been made and not yet previewed.</p>\n<p>Could the debug panel in the tagged page also be made aware of changes that have been previewed, and even have an optional setting to hot-reload the page if the preview is refreshed?</p>\n<p>Suggestion for the a &quot;reload&quot; button in the debug panel to be aware of preview refreshes, prompting you to re-load the page to see the update.</p>\n<p>Working on laptop screens means a lot of scrolling up and down to click on the &quot;preview&quot; button, and then down a long list to try and find the tag or variable you were working on. I‚Äôd debate that the preview button should be sticky to the top of the window, even if it does take up a small amount of screen space. Suggestion: a height-based CSS media query resulting in relative positioned preview button/bar up until about 500px viewport height, and then position:sticky for any taller. This would not steal space from the smallest viewports but provide a better UX for most laptops.</p>\n<p>Alternatively, or additionally, to the above point, highlight the last tags, triggers and variables you were working on in the lists (eg, a yellow row highlight, as below) to reduce cognitive load when scrolling through a long list and assisting you to quickly return to the items you are currently editing.</p>\n<p>Highlighting items that have recently been updated to make them easier to return to in a long list.</p>\n<p>Really important: In lists of tags/triggers/variables, I wish columns remembered the way I sorted them. When I‚Äôm at my busiest, I like the columns sorted by &quot;last edited&quot; -- that way I can see the items I‚Äôm working on right now. But I have to click the column twice every time I come back to the list because they always return to ascending name order. And honestly -- about those two clicks -- I‚Äôd debate there are more people who are developing tags and want to see the latest tags first (and so first click should be latest first), and less people trying to root out old tags (as is currently, with first click resulting in oldest first). But I‚Äôm hoping Google could correct me on that by consulting their own metrics of GTM usage.</p>\n<p>I wish every time I came back to this list, it was still sorted as &quot;last edited first&quot;.</p>\n<p>The two tables of variables. Having them split into &quot;Built-in&quot; and &quot;User defined&quot; (as below) still confuses me many times a day -- I often search for the variable I‚Äôm working on in the top table, and then realise my mistake and have to do it all over again in the bottom table -- because that‚Äôs the chemical memory I have learnt from the other lists. I‚Äôd debate the benefit of splitting the tables at all. They could be just be mixed up together and then we can have another column for &quot;built-in/user&quot; (and an icon, text boldness or text colour could also discriminate clearly between the two types). If the difference between the two types was of utmost important to an GTM dev/admin, you could sort by that column -- and if column sorting was remembered (as in the point above), that would essentially give you the same UI as you have now, only as a user setting instead of a default.</p>\n<p>The Variables panel -- split into &quot;Built-in&quot; and &quot;User-defined&quot;. My nemesis.<br>\nThe trigger list has a column for &quot;number of tags using this trigger&quot; (see below). Please, please could we have a similar column in the variables list (&quot;number of times this variable is used&quot;) -- it helps us clean the vars as we prune older tags, and sweep up discarded vars whilst we are developing new tags. It would also help us understand quickly if we were using more built-in variables than we needed.</p>\n<p>The &quot;usage number&quot; in the trigger list. Could we have this in the Variable list too?</p>\n<p>Having a name search across all tags/triggers/vars. Often I‚Äôm developing tags which work in concert with triggers and vars, so I name them in a similar way, eg &quot;accordion-click-tag&quot;, &quot;accordion-click-trigger&quot;. But to see them all, I need to go into three different panels (tags, triggers, vars). You might say that they would all appear together in the &quot;overview&quot; panel, but thats only the case if I‚Äôve made changes to all three of them since the last deploy.<br>\nSearch (and even at a push -- replace) across all content in text fields &amp; custom JS. On a regular basis I know that I have already built a method somewhere in my workspace, but I‚Äôm not able to find it without opening up lots of tags or vars. We can see from the amazing job GTM does with tokenising and auto-replacing var names in our custom scripts that the content is indexed, so could we search that index as well?</p>\n<p>Copying and pasting from the data layer in the debug panel. You can‚Äôt, and it‚Äôs a real pain:</p>\n<p>You can‚Äôt copy and paste from the data layer in the debug panel.</p>\n<p>I love that I can be editing a tag, click on the trigger at the of the panel bottom, edit the trigger in a slide-over panel, then return instantly to the tag. This is how the slide-over panel UI of GTM really wins. But so often I‚Äôd like to have the same ability to do this with moustached variables in text fields or in custom JS. Consider the one below. Sometimes I‚Äôd simply like to check what  actually is, and sometimes I know I‚Äôve got to edit it before I save this tag. But that means closing this tag (often in a half finished state), loading the list of variables, finding the variable you want, opening it, reviewing or editing the var, saving it, loading the list of tags, finding the tag you want, and finally reopening it in a new panel. That‚Äôs quite a round trip -- considering if I wanted to review the trigger for the same tag, I‚Äôd just click it then close it. My suggestion is a contextual menu to open the variable in a new slide-over. All the code to build that UI is in the GTM web app already. Quickest UX win ever.</p>\n<p>I wish I could inspect  without spending the next two minutes clicking buttons.</p>\n<p>Here‚Äôs a real loopy idea. Tabs. So you can work on the tag, trigger and vars all at the same time, without having to jump between panels. I know it‚Äôs probably a UI convention that doesn‚Äôt work well with the &quot;endless slide-over panels&quot; UI that exists in GTM -- and maybe the previous point would reduce the need for it -- but just consider the workflow efficiencies. Some of us are working around this already with multiple tabs in the browser -- and that can only lead to bad syncing and state problems.</p>\n",
      "date_published": "2020-05-19T22:00:00+02:00"
    },{
      "id": "https://example.com/posts/2020-01-ipad-webdev19-vscode-hosted/",
      "url": "https://example.com/posts/2020-01-ipad-webdev19-vscode-hosted/",
      "title": "2019 iPad Webdev - remote VS Code",
      "content_html": "<aside class=\"aside--less\">\n<p>This is part of a review of the front-end webdev scene on iPad in 2019, detailing different methods to code in iPadOS. For the full list and more, click here. And be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n<aside class=\"aside--update\">\n<h4 id=\"update-2020%E2%80%9304%E2%80%9317\">Update 2020‚Äì04‚Äì17 <a class=\"direct-link\" href=\"#update-2020%E2%80%9304%E2%80%9317\">#</a></h4>\n<p>Checkout <a href=\"https://servediter.app\">serveediter.app</a>, a neat native app that wraps up everything mentioned below along with a super cheap VPS subscription. It‚Äôs early days but it‚Äôs much more stable than the experience I had and it looks promising.</p>\n</aside>\n<aside class=\"aside--update\">\n<h4 id=\"update-2020%E2%80%9301%E2%80%9310\">Update 2020‚Äì01‚Äì10 <a class=\"direct-link\" href=\"#update-2020%E2%80%9301%E2%80%9310\">#</a></h4>\n<p>Reddit users have pointed me in the direction of <a href=\"https://visualstudio.microsoft.com/services/visual-studio-online/\">Visual Studio Online</a>, which is Microsoft‚Äôs official online version of VS Code, and has been in public preview since November 2019. It works great in desktop browsers (including having keyboard shortcuts)-- but so far it is not letting me access it with iPadOS; it says &quot;currently unsupported&quot; and tries to download &quot;undefined&quot; on sign-in. But along with the release notes talking about testing on iPad, it seems to be a good sign that Visual Studio Online will soon be supported on iPadOS. Until then, the below method (or Owen Williams‚Äô method) seems the only way of achieving VS Code on an iPad.</p>\n</aside>\n<aside class=\"aside--update\">\n<h4 id=\"update-2021%E2%80%9301%E2%80%9304\">Update 2021‚Äì01‚Äì04 <a class=\"direct-link\" href=\"#update-2021%E2%80%9301%E2%80%9304\">#</a></h4>\n<p>Also check out <a href=\"https://gitpod.io/\">gitpod.io</a>, an online service that also gives you a super quick way of accessing and editing github repos.</p>\n</aside>\n<aside>\n<p>This review uses VS Code 1.39.0 In the <a href=\"https://github.com/cdr/code-server/releases/tag/2.1692-vsc1.39.2\">cdr server package release 2.1692</a></p>\n</aside>\n<p>So this is a bombshell.</p>\n<p>I can run <a href=\"https://code.visualstudio.com/\">Microsoft VS Code</a> on my iPad. Real, actual VS Code, down to the built-in git client, terminal, extensions and multi-file search. I was first alerted to the possibility by <a href=\"https://link.medium.com/4nycoirfU2\">Owen Williams</a>‚Äô article back in June.</p>\n<p>Well, don‚Äôt get too excited, it‚Äôs 90% the real thing.</p>\n<p>Running VS Code (hosted) as a standalone web app.</p>\n<p>You see, the earliest versions of VS Code were based on a fork of <a href=\"https://atom.io/\">GitHub‚Äôs Atom</a>, a JS based editor. And even though VS Code has come a long way, it‚Äôs interface is still just HTML, CSS and JS, even if the heavy lifting is dealt with behind the scenes (mostly in GO?). And that means it‚Äôs essentially a web app that can be served to a web browser and even linked from your home screen as a standalone web-app.</p>\n<p>But the problem with it being not only a web-app but a relatively unsanctioned one at that, is that the developer experience has a few downsides:</p>\n<ul>\n<li>You need to be online (or at least serve it from a separate computer).</li>\n<li>You need to keep it running on the server (we‚Äôll talk about this in a moment), as well as secure from other users.</li>\n<li>Every time you return to the app, you briefly see a &quot;reconnecting&quot; dialog as the app wakes and looks for the VS code app server.</li>\n<li>Your experience is directly related to the speed of connection to your server.</li>\n<li>You can‚Äôt use any keyboard short-cuts (that‚Äôs a big ouch).</li>\n<li>You can‚Äôt touch/drag scroll bars.</li>\n<li>The settings menu is currently buggy (you can‚Äôt change any setting, but there‚Äôs a workaround here in the footnotes)</li>\n<li>The main hamburger menu disappears once you‚Äôve used it (oops).</li>\n<li>Various repaint glitches, touch-targets not all sized for touch screen usage, other small weirdnesses of running a very complex beta web-app.</li>\n</ul>\n<p>Extensions in VS Code. In terms of functionality, the hosted version is missing almost nothing over the app.</p>\n<p>Many of these are purely beta-testing bugs, but <a href=\"https://code.visualstudio.com/updates/v1_41#_browser-support\">there‚Äôs evidence that Microsoft are actively testing this set-up with iPads</a>, so expect to see improvements in the future. Could this eventually be a native app? I‚Äôd venture that getting it to work in a native app package with the file picker API etc is definitely within sight, but forking the capabilities of the app to be so very different when running natively on the iPad (eg could the iOS version do debugging, git, terminal, extensions in the same way?) are more likely to be holding Microsoft back from launching it. Who knows, but if anyone could get Apple to bend rules to suit webdev, it‚Äôs 2020 Microsoft.</p>\n<p>Now we‚Äôve covered the downsides, what are the benefits?</p>\n<ul>\n<li>Built in git-client, so you can pull, commit and push demo from your IDE directly on the remote server.</li>\n<li>Built in terminal, so you can run your Node.js toolchain on the remote server from within your IDE.</li>\n<li>err.. VS Code -- that means a top-tier code editor with almost endless extensions and theming.</li>\n</ul>\n<p>Multi file search and replace. One of many things missing in native iOS code editor apps.</p>\n<p>In practice, once you‚Äôre set-up and in a flow, you‚Äôre pulling, editing, saving, running Node.js tool chains all within VS Code as a standalone web-app (without need to think that it‚Äôs all happening remotely), then alt-tabbing to Safari/<a href=\"https://apps.pdyn.net/inspect/\">Inspect Browser</a> to check the results, then alt-tabbing back to VS Code exactly where you left it, to commit and push right there in the IDE. You‚Äôll get used to briefly seeing the &quot;reconnecting&quot; dialogs, but on a good connection, it‚Äôs a minor annoyance. It‚Äôs surprisingly seamless.</p>\n<p>Starting up and using VS Code on a VPS from an iPad.</p>\n<h3 id=\"but-hang-on%E2%80%A6\">But hang on‚Ä¶ <a class=\"direct-link\" href=\"#but-hang-on%E2%80%A6\">#</a></h3>\n<p>This is technically impressive, but in truth it has nothing to do with the iPad -- everything is happening on the server, so your precious iPad could be replaced by any web browser on any platform -- from a Chrome OS laptop to a Raspberry Pi mini-PC. It‚Äôs the browser equivalent of firing up Emacs, ssh-ing to a server and only leaving it to check the results.</p>\n<p>That doesn‚Äôt mean it doesn‚Äôt hit our main requirement (ie, doing &quot;real work&quot; on my mobile device of choice), it‚Äôs just that it feels a little like cheating.</p>\n<p>Running a simple python web server within the terminal inside VS Code.</p>\n<h3 id=\"how-to.\">How to. <a class=\"direct-link\" href=\"#how-to.\">#</a></h3>\n<ol>\n<li>First you need a Linux server to run it from. It could be a computer on your internal network, a remote server you have access to, or most probably a VPS (a Virtual Private Server -- a remote Linux account that your rent). This will probably take some sys-admin knowledge to set-up and prepare.</li>\n<li>To even start with a VPS, you‚Äôll need a decent SSH/Mosh client on your iPad. Use <a href=\"https://termius.com/\">Termius</a> if you like a slick iOS GUI, or <a href=\"https://www.blink.sh/\">Blink</a> if you live and die by the command line (and you want the stickiest connections ever).</li>\n<li>If you are using a remote server, the chances are that you will be starting up the VSCode server via an SSH connection, and if that connection is severed, your access to VSCode will eventually also time-out with your dead connection. So it‚Äôs best to make that connection as stable as possible by adding a <a href=\"https://mosh.org/\">Mosh</a> to your remote server.</li>\n<li>Now you need to get the hosted VSCode binary onto your remote server. If your server supports a recent version of Docker, there‚Äôs a <a href=\"https://github.com/cdr/code-server\">simple Docker command you can run here</a>. But for my VPS, it didn‚Äôt work, but <a href=\"https://github.com/cdr/code-server\">downloading, expanding and running the binary version worked</a> just fine.</li>\n<li>We‚Äôre ready to test it all out. Log into the remote server and run the code-server binary (or the docker command if that‚Äôs the version you downloaded). It will start up VSCode on port 8008, and will tell you the random password to use to log-in. Because this version of VSCode is often served in public, it defaults to needing a password, before nasty people start doing nasty things to your code.</li>\n<li>In Safari on your iPad you can go to the IP or domain of your remote server at port 8008, and you‚Äôll see a log-in screen (see below). Before you enter the password, go into the Safari action/share sheet and save this web app to your homescreen. It‚Äôs not a full PWA, but it will make a standalone web app link that will give you more screen space (none of the Safari UI) and make it easier to switch between editor and browser.</li>\n<li>Now you can open the VSCode web app from your homescreen and enter the random password that was shown to you in the command line when you started up the VSCode server. And suddenly you have VSCode on your iPad!</li>\n<li>If you have a project already checked out on your remote server, you can open it up using &quot;File&quot; in the hamburger menu top-left of the VSCode screen. If you don‚Äôt yet have a project on your remote server, use an SFTP client or even a code editor like <a href=\"https://www.textasticapp.com/\">Textastic</a> to transfer your project up to the server.</li>\n<li>If that project is a Git repo, VSCode will attempt to get the git status of the project (if your remote server doesn‚Äôt have an SSH key for your git service, your terminal app will be sitting there requesting your Git password).</li>\n<li>One last thing. You‚Äôll get pretty fed up quickly with that password on VSCode. If you‚Äôre running VSCode in a safe enviroment (LAN server, Raspberry Pi), the instructions to remove the password are given on the command line where you see the randomized password. Otherwise, pick a password and set it up in what they call an environment variable. On the remote server, type:<br>\necho &quot;export PASSWORD=YourPassword&quot; &gt;&gt; /etc/profile<br>\n‚Ä¶where YourPassword is‚Ä¶ well you get the idea. Next time you start up the VSCode server and get to the log-in, you won‚Äôt need to copy/paste that random password, you‚Äôll have your own.</li>\n<li>Ok, this is the last thing. Using this out in the open is still a security risk even with the password on it. I wouldn‚Äôt risk setting it up to run all the time if I can help it. Shut it down when you‚Äôve finished your session.</li>\n</ol>\n<p>The password entry for hosted VSCode as seen in a browser. By default, the password is set randomly and shown in the terminal session that started the server.</p>\n<h3 id=\"optional-extras\">Optional Extras <a class=\"direct-link\" href=\"#optional-extras\">#</a></h3>\n<ul>\n<li>Could I marry this workflow with a Raspberry Pi (or any local Linux computer) instead of a VPS? Heck yes, and you wouldn‚Äôt need the Mosh server or passwords every time you launch VS Code. A Raspberry Pi 4B with decent memory should be more than capable -- although I haven‚Äôt tried it‚Ä¶ yet.</li>\n<li>I haven‚Äôt tried it yet, but I suspect it‚Äôs not impossible to make a siri shortcut that uses Blink to open the connection to the VPS, start up the VSCode server and then opens the standalone web app on you iPad, all in one icon tap. And then you might need another to shut the server down once you‚Äôve finished.</li>\n</ul>\n<p>Raspberry Pi 3B+ powered by an Anker battery pack. Could it be your VSCode in a box?</p>\n<h3 id=\"links\">Links <a class=\"direct-link\" href=\"#links\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/cdr/code-server\">GitHub - cdr/code-server: VS Code in the browser</a></li>\n<li><a href=\"https://link.medium.com/4nycoirfU2\">Owen Williams‚Äô Medium article on using hosted VS Code with an iPad</a></li>\n<li><a href=\"https://code.visualstudio.com/\">Full Microsoft Visual Studio site</a></li>\n</ul>\n<h3 id=\"footnote\">Footnote <a class=\"direct-link\" href=\"#footnote\">#</a></h3>\n<p>There‚Äôs a classic front end bug in the settings in the current version of hosted VS Code (that‚Äôs bound to be fixed soon) where you can‚Äôt interact with the settings (select menus, checkboxes,etc). It‚Äôs probably a z-index thing, you know the bug. But happily, the VS code team have done a great job with accessibility, so you can click on the settings section you want, then use the tab key to cycle through the settings options, arrow keys to use select menus, and the space key to action things like checkboxes.</p>\n<aside class=\"aside--less aside--bottom\">\n<p>This is part of a review of the front-end webdev scene on iPad in 2019, detailing different methods to code in iPadOS. For the full list and more, click here. And be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n",
      "date_published": "2020-01-05T23:00:00+01:00"
    },{
      "id": "https://example.com/posts/2020-01-ipad-webdev19-raspberry-pi/",
      "url": "https://example.com/posts/2020-01-ipad-webdev19-raspberry-pi/",
      "title": "2019 iPad Webdev - Raspberry Pi",
      "content_html": "<aside class=\"aside--less\">\n<p>This is part of a review of the front-end webdev scene on iPad in 2019, detailing different methods to code in iPadOS. For the full list and more, click here. And be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n<aside class=\"aside--update\">\n<h3 id=\"update-2021%E2%80%9301%E2%80%9304\">Update 2021‚Äì01‚Äì04 <a class=\"direct-link\" href=\"#update-2021%E2%80%9301%E2%80%9304\">#</a></h3>\n<p><a href=\"https://medium.com/sausheong/setting-up-a-raspberry-pi-4-as-an-development-machine-for-your-ipad-pro-3813f872fccc\">This Medium article</a> (paywall, unfirtunately) is the best resource I‚Äôve found for setting up all the possible iPad/Pi combinations.</p>\n</aside>\n<p>This could qualify as one of the hacks of the year and has gained quite a lot of traction in the last six months.</p>\n<p>The idea is pretty simple. Once you‚Äôve got used to playing with a VPS (Virtual Private Server ‚Äî a remote Linux account you rent) as the web development accessory to your iPad, you start to wonder if that Linux server could be closer to you. Much closer. And smaller ‚Äî almost as if you could carry it in your pocket.</p>\n<p>Well, that describes a Raspberry Pi. Of course any UNIX/Linux computer would do, but it just so happens that Pi‚Äôs are cheap ($‚Ç¨¬£35‚Äì100 depending on the level of spec and comfort) and very well supported with community documentation.</p>\n<p>I‚Äôd been playing with Raspberry Pi‚Äôs as part of dashboard appliances, and was just considering using them as an off-board Linux server to a iPad when I realised smarter people were way ahead of me. The first time I saw a Raspberry Pi used specifically for development with an iPad, it was from the supremely talented Brent Jackson in July:</p>\n<p><a href=\"https://twitter.com/jxnblk/status/1147555688933154816?s=21\">https://twitter.com/jxnblk/status/1147555688933154816?s=21</a></p>\n<p>It blew my mind because I‚Äôm not sure how he‚Äôd arrived at it, but it was a fully formed workflow using USB-C to not only power the Pi, but as ethernet over USB as well (he even documented the types of cable he had success with and those that didn‚Äôt work out). Here‚Äôs <a href=\"https://threader.app/thread/1147555688933154816\">the whole Twitter thread on Threader</a>.</p>\n<p>It took off from there. I had an iPad Pro 10.5‚Äù with Lighning connectors, so USB-C power and network weren‚Äôt going to work for me, but I could connect to them over WiFi easily enough. And I found I didn‚Äôt need to stretch to the Pi 4B, the Pi 3B+ model that I already owned was fast enough for most work, and as a bonus had much lower power demands, so using a 10Ah 12Watt Anker battery pack (not a PD one with crazy output) was enough to run it. If you plugged it into a monitor, it would complain about power during boot-up, but in general headless usage, it never hit any limits.</p>\n<p>For a plane trip in September, I decided to try and get it working without any internet ‚Äî just the iPad, the Pi and the battery pack, totally off-line. I eventually got the Pi to act as a WiFi NAT and DHCP server, essentially acting as a router with no connection to route, leaving just the iPad and the Pi as the only IPs on our mini network. It worked great and I could literally carry it in my pocket whilst working on it. If you‚Äôd like to try this ‚Äúoffline‚Äù set-up, there‚Äôs a link at the bottom of this article.</p>\n<p><a href=\"https://twitter.com/pixelthing/status/1172589731886063616?s=21\">https://twitter.com/pixelthing/status/1172589731886063616?s=21</a></p>\n<p>Once <a href=\"https://secureshellfish.app/\">Secure Shellfish</a> came out, sending files to and from a Raspberry Pi was as easy as if it was an external drive, Shellfish just made it another file provider in the ‚ÄúFiles‚Äù app.</p>\n<p>Shellfish set-up to connect to my Rasbperry Pi 3B+<br>\nAnd since Brent‚Äôs first tweet, I‚Äôve seen the Pi pop up again and again as an iPad accessory. Rob at the <a href=\"https://www.youtube.com/channel/UCT-GpMtIFhX9EMA0Eauevhw\">TechCraft YouTube channel</a> has made several videos about setting up the Pi for use with an iPad, both with USB-C and Wifi connections. In fact, I‚Äôm not going to try to explain the set-up, because he does a much better job.</p>\n<p><a href=\"https://youtu.be/IR6sDcKo3V8\">https://youtu.be/IR6sDcKo3V8</a></p>\n<h3 id=\"pros\">Pros <a class=\"direct-link\" href=\"#pros\">#</a></h3>\n<ul>\n<li>You get a full Linux server that you can customise in any way you want.</li>\n<li>It‚Äôs ridiculously portable, and can even be used in a workflow when you‚Äôre fully offline, under battery power.</li>\n<li>Unlike a VPS, the quality of your internet connection is of no consequence.</li>\n<li>You can buy and own it for less than the cost of one years‚Äô rental of a cheap VPS.<br>\nGeek cred.</li>\n</ul>\n<h3 id=\"cons\">Cons <a class=\"direct-link\" href=\"#cons\">#</a></h3>\n<ul>\n<li>It‚Äôs another thing to carry, another thing to charge, another thing that can be damaged or lost.</li>\n<li>You need to be willing to get pretty dirty with Linux command line</li>\n<li>Back-up is your responsibility.</li>\n<li>The Pi 4B can get pretty hot ‚Äî best to bare in mind that if you need to stay mobile, it won‚Äôt appreciate working in a pocket or a bag for long periods.</li>\n</ul>\n<h3 id=\"optional-extras\">Optional extras <a class=\"direct-link\" href=\"#optional-extras\">#</a></h3>\n<ul>\n<li>You can spec or modify these suckers until your heart‚Äôs content.</li>\n<li>Tether it with USB-C for charging and network? Use Wi-Fi+battery and leave it in the bag? It‚Äôs up to you what works best.</li>\n<li>Using a Raspberry Pi with the <a href=\"https://medium.com/p/18f482f3a976\">VPS/VSCode method</a> would be pretty knockout. You might want to use a higher spec Pi 4B with some decent memory though.</li>\n<li>You might want to use the Raspberry Pi as your development process, and then the CD/Netlify method as the next step, when you want to deploy your code to stage or production.</li>\n</ul>\n<h3 id=\"links\">Links <a class=\"direct-link\" href=\"#links\">#</a></h3>\n<ul>\n<li><a href=\"https://threader.app/thread/1147555688933154816\">Thread of Brent Jackson‚Äôs USB-C Raspberry Pi 4B</a></li>\n<li><a href=\"https://gist.github.com/pixelthing/2d9d335cdd3632210febf2d2a15b5365\">My set-up instructions to start-up a Pi in ‚Äúoffline‚Äù WiFi NAT mode, that you could connect your iPad to</a></li>\n<li><a href=\"https://youtu.be/ebYB9rVHaeg\">TechCraft set-up of a Raspberry Pi for a USB-C iPad</a></li>\n<li><a href=\"https://youtu.be/YbvSS8MJm2s\">TechCraft set-up of a Raspberry Pi for a Lightning iPad</a></li>\n</ul>\n<aside class=\"aside--less aside--bottom\">\n<p>This is part of a review of the front-end webdev scene on iPad in 2019, detailing different methods to code in iPadOS. For the full list and more, click here. And be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n",
      "date_published": "2020-01-05T23:00:00+01:00"
    },{
      "id": "https://example.com/posts/2020-01-ipad-webdev19-playjs/",
      "url": "https://example.com/posts/2020-01-ipad-webdev19-playjs/",
      "title": "2019 iPad Webdev - Play.js",
      "content_html": "<aside class=\"aside--less\">\n<p>This is part of a review of the front-end webdev scene on iPad in 2019, detailing different methods to code in iPadOS. For the full list and more, click here. And be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n<aside class=\"aside--update\">\n<h3 id=\"update-2020%E2%80%9305%E2%80%9328\">Update 2020‚Äì05‚Äì28 <a class=\"direct-link\" href=\"#update-2020%E2%80%9305%E2%80%9328\">#</a></h3>\n<p>Play.js 2.0 has launched and it‚Äôs a full re-write with many of the small annoyances that I mention in this article having been fixed. Plus Vue.js is now supported out of the box. <a href=\"https://apps.apple.com/us/app/play-js/id1423330822#?platform=ipad\">It‚Äôs well worth checking out</a>, and there‚Äôs a short review in this <a href=\"https://link.medium.com/8PoMYziJLcb\">2020 article</a>.</p>\n</aside>\n<aside>\n<p><a href=\"https://playdotjs.com/\">This review uses Play.js 1.14.1</a></p>\n</aside>\n<p><a href=\"https://playdotjs.com/\">Play.js</a> is so close to being my holy grail of iOS webdev apps, and if you are a React front-end dev, it might well be yours right now.</p>\n<p>It‚Äôs not just an editor, it‚Äôs a fully integrated environment that lets you run Node.js processes and install Node.js modules. Yes really -- this is the app <a href=\"https://blog.usejournal.com/fe-webdev-on-ipad-pro-2018-c55283f01e4c\">I have been imagining for several years</a>.</p>\n<p>Two windows of play.js, running the index.js in the left window, which spawned the internal browser in the right window with the results. And bottom left is the Node.js console.</p>\n<p>But, it has some caveats. It curently has a specific focus on three audiences: Node.js app dev, React Native dev, and React webdev (which is currently marked as in &quot;beta&quot;). There is wiggle room to get some other projects working, but I haven‚Äôt had much success trying to get Gulp or Vue.js projects running.</p>\n<p>The way Play.js works is a little unconventional if you‚Äôre used to working with front-end tooling in the command line, although if you‚Äôve used <a href=\"http://omz-software.com/pythonista/\">Pythonista</a> on iOS it might be familiar. If your project has a package.json file and an index.js file in the project root -- you click on the play button, and the dependencies will download, and the script will run in an internal browser.</p>\n<p>It‚Äôs almost magic.</p>\n<p>Here‚Äôs the magic in action. Press &quot;play&quot; and the app installs the modules and runs index.js</p>\n<p>This is running front-end tooling locally on your iPad without any use of a remote or Virtual Private Server (VPS), and without having to limit yourself to developing a flat file site. For this reason alone (plus if you want to develop server-side node apps), play.js has quite a faithful following.</p>\n<p>The default project menu, before you expand it. do you know which is the right React project to run?</p>\n<h3 id=\"in-practice\">In practice <a class=\"direct-link\" href=\"#in-practice\">#</a></h3>\n<p>I have to admit that although I do almost every type of Front-End development, building production ready projects in React remains a blind side for me, so my usage of the app is a little on the surface level. I‚Äôll come back with a new review when it supports VueX ;-)</p>\n<p>But it essentially does what it says on the tin. The test React projects that I‚Äôve checked out from GitHub with Working Copy are easily accessed in Play.js with &quot;edit-in-place&quot;. If the index.js file is in the root and it has a package.json file, pressing play installs the modules and runs the Node.js tool chain.</p>\n<p>The file sidebar. The top directory with &quot;..&quot; goes up a level.</p>\n<p>The file sidebar is esoteric by design, and having &quot;back to parent directory&quot; buttons as ellipsis‚Äô, it would probably appeal more to Linux junkies than strict <a href=\"https://developer.apple.com/design/human-interface-guidelines/\">iOS HIG</a> followers -- but that‚Äôs ok.</p>\n<p>Apps that have their own file list style still have their quirks. When you add new files an folders, there is no affordance that they have been successfully added -- no toast, no scrolling the file list to them, no opening them for editing. In one session, I eventually found 27 new empty files I‚Äôd created without knowing, that I would have seen if I wasn‚Äôt working in a large project that required you to scroll to see files beginning with &quot;N&quot; for &quot;New_file&quot;. Small stuff, easily fixed (I hope!).</p>\n<p>The editor has come a very long way in a year. Building a code editor is always a case of re-inventing the wheel one spoke at a time, but it has progressed from one where the undo function was actually scrambling code for me, to one which feels like it‚Äôs aiming for the best of the best. Symbol auto-suggestion seems solid, as does tabbing and syntax colouring. There‚Äôs work to be done -- it‚Äôs not my favourite code editor on the iPad (yet) -- but the rate of updates leaves no doubt that more is coming.</p>\n<p>The traffic-light close/minimise buttons (echoing window controls in OSX) make me smile, but I wonder about the utility of any buttons you have to click twice -- once to enlarge them, a second time to use them.</p>\n<p>The Git controls in the sidebar. Also note the traffic light buttons.</p>\n<p>Unusually for almost any iOS code editor (please tell me if I‚Äôm wrong), it has great Git support, allowing you commit and push from within the editor. The benefit of which becomes apparent next.</p>\n<p>Leaving the app will sometimes have iOS killing it from memory -- mainly due to memory pressure I guess. Which is a shame not just because Play.js has to then reload when you return to it, but often because it can‚Äôt auto-load the project you left it with. So you have to navigate to the project and file you were working on. The answer to this is of course to try and stay in the app and not leave it-- and the author has done amazing work with adding consoles, browsers and Git support to reduce the need to leave the app.</p>\n<p>The in-app browser (that cleverly opens itself in a new window docked to the side of the code) doesn‚Äôt have any special functions apart from having a button to load the same page in an external browser (Safari). I wish we could specify the browser to load the results in -- being able to use <a href=\"https://apps.pdyn.net/inspect/\">Inspect Browser</a> would instead would help a great deal with debugging.</p>\n<p>The project/app list (default view).</p>\n<p>If I‚Äôm honest, the most confusing part for me is the project menu. By default it‚Äôs a row of unlabelled icons. You can optionally expand them to be a grid of labelled icons. I thought I was colour and icon orientated, but I still can‚Äôt get used to remembering if it was the pink or the red React project I wanted to load.</p>\n<p>The last thing to mention is that all the example React projects in the app have the code commented that watching has been disabled due to memory constraints. Having a tool chain that isn‚Äôt able to live-reload code when a change occurs is a pain -- but I wonder if this is set because Play.js follows the iOS convention of not having a &quot;save&quot; button, but auto-saving on every key change. Certainly, adding watchers back in crashes the app after some quick code edits. I wonder if this is why GoCoEdit is the only IDE that does live-preview -- because it‚Äôs also the only IDE that asks you to physically click &quot;save&quot;, so isn‚Äôt trying to update all the time you have your hands on the keyboard.</p>\n<h3 id=\"pros\">Pros <a class=\"direct-link\" href=\"#pros\">#</a></h3>\n<ul>\n<li>One iPad is all you need to run and develop your web React project. No servers, no cables, no extra computers. Online or offline.</li>\n<li>And you didn‚Äôt even have to type npm i</li>\n<li>With built in Git, you can pull and push changes without leaving the app. I can‚Äôt think of another iOS native IDE that does that.</li>\n<li>It‚Äôs definitely trying to look at a traditional command line bound problem and solve it in an innovative way.</li>\n</ul>\n<h3 id=\"cons\">Cons <a class=\"direct-link\" href=\"#cons\">#</a></h3>\n<ul>\n<li>The type of projects you can use it for are narrow in breadth (but they are very popular types of project -- React native, React web, Node.js)</li>\n<li>Still developing in lots of ways (functionality, UI, stability). But high goals.</li>\n<li>Probably not as ultimately flexible as a real Linux server.</li>\n</ul>\n<h3 id=\"optional-extras\">Optional extras <a class=\"direct-link\" href=\"#optional-extras\">#</a></h3>\n<ul>\n<li>Add a <a href=\"https://medium.com/p/ed9eb66579ec\">continuous deployment (CD) workflow with Netlify</a> to deploy to an external staging server once you‚Äôre happy with your work, just by committing your changes with a branch (or doing a merge). And you can even do that in Play.js itself, you don‚Äôt even need to fire up a Got client.</li>\n</ul>\n<h3 id=\"links\">Links <a class=\"direct-link\" href=\"#links\">#</a></h3>\n<ul>\n<li>Link to Play.js</li>\n</ul>\n<aside class=\"aside--less aside--bottom\">\n<p>This is part of a review of the front-end webdev scene on iPad in 2019, detailing different methods to code in iPadOS. For the full list and more, click here. And be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n",
      "date_published": "2020-01-05T23:00:00+01:00"
    },{
      "id": "https://example.com/posts/2020-01-ipad-webdev19-panic-coda/",
      "url": "https://example.com/posts/2020-01-ipad-webdev19-panic-coda/",
      "title": "2019 iPad Webdev - Panic Coda/Code editor",
      "content_html": "<aside class=\"aside--less\">\n<p>This is part of a review of the front-end webdev scene on iPad in 2019, detailing different methods to code in iPadOS. For the full list and more, click here. And be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n<p><a href=\"https://gocoedit.app/\">Using GoCoEdit 16.1</a></p>\n<p>What an extraordinary conundrum GoCoEdit is.<br>\nIt‚Äôs about as far from a conventional iOS app as it‚Äôs possible to make, but it is one of the most complete native IDEs -- in terms of features -- there is on the platform.<br>\nIn truth it‚Äôs a clever combination of hundreds of hours of work and several different OSS libraries -- primarily Codemirror, a mature JS based code editor (and don‚Äôt snigger, it‚Äôs used in Chrome &amp; Firefox devtools, plus Brackets, Codeanywhere and Jupyter).</p>\n<p>GoCoEdit‚Äôs interesting take on UI. Are those buttons wrapped CSS flexbox?<br>\nThis OSS base is possibly one of the reasons the app feels so un-iPad-like. The file-list sidebar looks more like a Java app than an iPadOS one, with very few gestures anywhere (there‚Äôs no swiping items in lists, for example), dialogs and menu items are in unusual, uppercase, non-rounded rectangles, and every piece of UI is in a very un-iOS monospace font. I almost discarded it as a hobby project before I gave it a chance, because I mistakenly interpreted &quot;different&quot; as &quot;amateurish&quot;.<br>\nBut I‚Äôm glad I did give it some time, because it has masses of thought put into it‚Äôs workflow, and lots of hidden depths.</p>\n<p>Despite not looking like the usual sidebar, it does support OS level file drag and drop, allowing you to copy folders directly into (and out of) it. Dragging folders from the &quot;files&quot; app into the file list works fine and you can drag them into the &quot;external&quot; heading, but they don‚Äôt seem to be &quot;edit in place&quot; because if I make any changes, Working Copy doesn‚Äôt recognise them, so the files must have been copied -- not linked? It could just be a mistake that you can drag them into &quot;external&quot; at all.<br>\n&quot;Edit in place&quot; is definitely available in the &quot;open from&quot; option at the top of the file sidebar, and it correctly allows me to edit files in a checked-out Working Copy repo and commit/push any changes back (In WC, not in GoCoEdit itself), painlessly.</p>\n<p>GoCoEdit‚Äôs auto-suggest is spot on, here offering the correct symbols to a Vue.js object.<br>\nIt also has keyboard shortcuts that have been thoroughly considered to keep your hands away from the screen, as well as a code snippet system that lets you speed up repetitive tasks. On top of that it supports Siri Shortcuts, including having it‚Äôs own x-callback hooks. This is an app that is obviously in heavy use by the developer, it seems to scratch so many specific itches, it can only be so.<br>\nThe editor interface itself is one of the most full-featured anywhere on iOS. It has auto-complete that is not only accurate (closing the correct tag for instance) but auto-suggests from symbols in the page/script/style sheet you‚Äôre editing. Line breaks auto-tab the next line in a useful and predictable manner. The extra symbol keyboard is one of the most comprehensive and easiest to use, and has a mysterious &quot;dot&quot; in the middle that acts like the iOS13 draggable caret -- hold down and drag your finger and the text selection caret moves with your finger, double tap it and it selects the line.</p>\n<p>That does bring us to text selection, which is closer to the custom style in Panic Coda than to the new standard style in iOS13. Holding your finger down on any piece of text brings up a rectangular magnified loupe of the text. The blue bars at the start and end of a text selection don‚Äôt have the customary dots on them (an iOS13 problem?), and the context pop-over when you select text doesn‚Äôt have a &quot;select all&quot; option, a weird omission. But‚Äôs easier to think that this is a keyboard driven app -- selecting a whole doc of code is easier with command-A.<br>\nUnusually for any iOS app, GoCo doesn‚Äôt continuously auto-save but requires you to tap &quot;save&quot; to commit a change to it (either by command-s or by tapping the tick-mark in the top right -- yellow is unsaved, green is saved).</p>\n<p>GoCoEdit editing a project directly from Working Copy, with live preview in Safari on the right.<br>\nGoCoEdit has a built in preview flat-file web server, and also offers an internal browser to show the results of your code. The in-app browser is modal, so it takes over the screen, but closing it leaves you back exactly where you left the editor (not always the case in some editors). The browser has a very limited responsive view, and a console that at least displays script line references and shallow JS objects -- so not bad at all.<br>\nBut GoCoEdit also lets you choose Safari or Chrome to preview in as well, and this is where it gets really interesting. Many iOS code editors can start up an internal web server that other browsers can use, but GoCoEdit uses the standard port 80 -- not random ports as with most other apps. This makes it easier to test oAuth based apps -- which often require a predetermined host and port, and is the single feature that has made it my go-to editor for the moment.</p>\n<p>GoCoEdit previewing a page in Safari on the right. Note that the app‚Äôs action menu shows &quot;Safari&quot; with a lightning symbol, indicating that it‚Äôs in live-preview mode, so will refresh on every save.<br>\nThe sugar on the top is the extra option of live preview. If you dock Safari to the side of GoCoEdit, you can makes changes to the code, and every time you hit save, the browser automatically reloads the page. If you keep Safari in the slide-over sheet, every time you hit save, Safari sweeps in from the right as it‚Äôs re-loading -- giving you instand feedback without stealing your screen space. If you switch to another app and then return to GoCoEdit, you will be greeted with a red toast saying &quot;live preview disabled&quot;, but all it takes is hitting the &quot;Safari&quot; button in the top right action menu and you‚Äôre connected again.<br>\nI love this live-preview feature.<br>\nOf course, Safari has no devtools, so I‚Äôd love to see an option in GoCoEdit to have the same behaviour with Inspect Browser.</p>\n<p>The custom button row in GoCoEdit. The centre dot moves the text selection carat, similar to a how a ThinkPad &quot;pointing stick&quot; works.<br>\nI find myself reminded of the early days of Sublime Text, where the user interface -- especially, as here, the file sidebar-- was so un Mac-like it made me cringe, but the utility of the application was undeniable.<br>\nIf I had a 12.9&quot; iPad I‚Äôd be tempted to be greedy and ask for vertical split panes so I could see two files at the same time (or multi-window usage as Textastic is working on), even if here on my 10.5&quot;, that would be a crazy idea. But the app is that productive that I‚Äôm almost beyond complaining about the basics and I‚Äôm starting to ask for more features. Multi-file search and replace would be good though.<br>\nDevelopment of the app seems to be continuing with several updates since iOS 13, so I hope it will continue apace. But this is heroic effort from yet another lone talented developer (so give them a break). The approach taken in this app, of leaning on OSS libraries and bridging them with custom code has allowed it‚Äôs feature count to leapfrog some other IDEs in the short term (take tag-closing or auto-suggest as an example), although as iOS11/12/13 has proved to many apps, staying away from the standard UIKit way of building the interface can quickly leave you behind when updates break your code. I hope that‚Äôs not the case here, there is some real pro-level functionality in this app, mixed in with some of the latest APIs (iOS13 &quot;edit in place&quot;, drag and drop, Siri Shortcuts).</p>\n<p>It‚Äôs well worth the $‚Ç¨¬£10. And I don‚Äôt often say this, but leave a good review on the app store, it seems to be lacking a bit of exposure compared with the other IDEs.</p>\n<p>I‚Äôm going to give it a go -- for a source controlled flat file project, it seems to be the whole package. It‚Äôs just‚Ä¶ idiosyncratic.</p>\n<h3 id=\"pros\">Pros <a class=\"direct-link\" href=\"#pros\">#</a></h3>\n<ul>\n<li>Integrated terminal</li>\n<li>Internal server &amp; browser for flat file preview, with live preview to external browsers.</li>\n<li>Access to remote cloud services (dropbox, Google Drive, Onedrive, FTP/SFTP)</li>\n<li>&quot;edit in place&quot; making it compatible with Git clients like Working Copy, and drag‚Äôn‚Äôdrop copying in and out of the file list.<br>\n19 common themes (molokai, material, solarized, etc, plus the ability to make custom ones)<br>\nMulti-caret editing<br>\nGood tag completion and auto-suggesting from symbols.<br>\nSiri shortcuts with x-callback</li>\n</ul>\n<h3 id=\"cons\">Cons <a class=\"direct-link\" href=\"#cons\">#</a></h3>\n<ul>\n<li>&quot;Unusual&quot; user interface design.</li>\n<li>A little slow at returning to the foreground after iOS has killed it in the background.</li>\n<li>No multi-file search &amp; replace.</li>\n</ul>\n<h3 id=\"links\">Links <a class=\"direct-link\" href=\"#links\">#</a></h3>\n<ul>\n<li>Link to GoCoEdit website</li>\n</ul>\n<aside class=\"aside--less aside--bottom\">\n<p>This is part of a review of the front-end webdev scene on iPad in 2019, detailing different methods to code in iPadOS. For the full list and more, click here. And be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n",
      "date_published": "2020-01-05T23:00:00+01:00"
    },{
      "id": "https://example.com/posts/2020-01-ipad-webdev19-gocoedit/",
      "url": "https://example.com/posts/2020-01-ipad-webdev19-gocoedit/",
      "title": "2019 iPad Webdev - GoCoEdit",
      "content_html": "<aside class=\"aside--less\">\n<p>This is part of a review of the front-end webdev scene on iPad in 2019, detailing different methods to code in iPadOS. For the full list and more, click here. And be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n<aside>\n<p><a href=\"https://gocoedit.app/\">This review uses GoCoEdit 16.1</a></p>\n</aside>\n<p>What an extraordinary conundrum GoCoEdit is.</p>\n<p>It‚Äôs about as far from a conventional iOS app as it‚Äôs possible to make, but it is one of the most complete native IDEs -- in terms of features -- there is on the platform.</p>\n<p>In truth it‚Äôs a clever combination of hundreds of hours of work and several different OSS libraries -- primarily <a href=\"https://codemirror.net/\">Codemirror</a>, a mature JS based code editor (and don‚Äôt snigger, it‚Äôs used in Chrome &amp; Firefox devtools, plus <a href=\"http://brackets.io/\">Brackets</a>, <a href=\"https://codeanywhere.com/\">Codeanywhere</a> and <a href=\"https://jupyter.org/\">Jupyter</a>).</p>\n<p>GoCoEdit‚Äôs interesting take on UI. Are those buttons wrapped CSS flexbox?</p>\n<p>This OSS base is possibly one of the reasons the app feels so un-iPad-like. The file-list sidebar looks more like a Java app than an iPadOS one, with very few gestures anywhere (there‚Äôs no swiping items in lists, for example), dialogs and menu items are in unusual, uppercase, non-rounded rectangles, and every piece of UI is in a very un-iOS monospace font. I almost discarded it as a hobby project before I gave it a chance, because I mistakenly interpreted &quot;different&quot; as &quot;amateurish&quot;.</p>\n<p>But I‚Äôm glad I did give it some time, because it has masses of thought put into it‚Äôs workflow, and lots of hidden depths.</p>\n<p>Despite not looking like the usual sidebar, it does support OS level file drag and drop, allowing you to copy folders directly into (and out of) it. Dragging folders from the &quot;files&quot; app into the file list works fine and you can drag them into the &quot;external&quot; heading, but they don‚Äôt seem to be &quot;edit in place&quot; because if I make any changes, Working Copy doesn‚Äôt recognise them, so the files must have been copied -- not linked? It could just be a mistake that you can drag them into &quot;external&quot; at all.</p>\n<p>&quot;Edit in place&quot; is definitely available in the &quot;open from&quot; option at the top of the file sidebar, and it correctly allows me to edit files in a checked-out Working Copy repo and commit/push any changes back (In WC, not in GoCoEdit itself), painlessly.</p>\n<p>GoCoEdit‚Äôs auto-suggest is spot on, here offering the correct symbols to a Vue.js object.</p>\n<p>It also has keyboard shortcuts that have been thoroughly considered to keep your hands away from the screen, as well as a code snippet system that lets you speed up repetitive tasks. On top of that it supports Siri Shortcuts, including having it‚Äôs own x-callback hooks. This is an app that is obviously in heavy use by the developer, it seems to scratch so many specific itches, it can only be so.</p>\n<p>The editor interface itself is one of the most full-featured anywhere on iOS. It has auto-complete that is not only accurate (closing the correct tag for instance) but auto-suggests from symbols in the page/script/style sheet you‚Äôre editing. Line breaks auto-tab the next line in a useful and predictable manner. The extra symbol keyboard is one of the most comprehensive and easiest to use, and has a mysterious &quot;dot&quot; in the middle that acts like the iOS13 draggable caret -- hold down and drag your finger and the text selection caret moves with your finger, double tap it and it selects the line.</p>\n<p>That does bring us to text selection, which is closer to the custom style in Panic Coda than to the new standard style in iOS13. Holding your finger down on any piece of text brings up a rectangular magnified loupe of the text. The blue bars at the start and end of a text selection don‚Äôt have the customary dots on them (an iOS13 problem?), and the context pop-over when you select text doesn‚Äôt have a &quot;select all&quot; option, a weird omission. But‚Äôs easier to think that this is a keyboard driven app -- selecting a whole doc of code is easier with command-A.</p>\n<p>Unusually for any iOS app, GoCo doesn‚Äôt continuously auto-save but requires you to tap &quot;save&quot; to commit a change to it (either by command-s or by tapping the tick-mark in the top right -- yellow is unsaved, green is saved).</p>\n<p>GoCoEdit editing a project directly from Working Copy, with live preview in Safari on the right.</p>\n<p>GoCoEdit has a built in preview flat-file web server, and also offers an internal browser to show the results of your code. The in-app browser is modal, so it takes over the screen, but closing it leaves you back exactly where you left the editor (not always the case in some editors). The browser has a very limited responsive view, and a console that at least displays script line references and shallow JS objects -- so not bad at all.</p>\n<p>But GoCoEdit also lets you choose Safari or Chrome to preview in as well, and this is where it gets really interesting. Many iOS code editors can start up an internal web server that other browsers can use, but GoCoEdit uses the standard port 80 -- not random ports as with most other apps. This makes it easier to test oAuth based apps -- which often require a predetermined host and port, and is the single feature that has made it my go-to editor for the moment.</p>\n<p>GoCoEdit previewing a page in Safari on the right. Note that the app‚Äôs action menu shows &quot;Safari&quot; with a lightning symbol, indicating that it‚Äôs in live-preview mode, so will refresh on every save.</p>\n<p>The sugar on the top is the extra option of live preview. If you dock Safari to the side of GoCoEdit, you can makes changes to the code, and every time you hit save, the browser automatically reloads the page. If you keep Safari in the slide-over sheet, every time you hit save, Safari sweeps in from the right as it‚Äôs re-loading -- giving you instand feedback without stealing your screen space. If you switch to another app and then return to GoCoEdit, you will be greeted with a red toast saying &quot;live preview disabled&quot;, but all it takes is hitting the &quot;Safari&quot; button in the top right action menu and you‚Äôre connected again.</p>\n<p>I love this live-preview feature.</p>\n<p>Of course, Safari has no devtools, so I‚Äôd love to see an option in GoCoEdit to have the same behaviour with Inspect Browser.</p>\n<p>The custom button row in GoCoEdit. The centre dot moves the text selection carat, similar to a how a ThinkPad &quot;pointing stick&quot; works.</p>\n<p>I find myself reminded of the early days of Sublime Text, where the user interface -- especially, as here, the file sidebar-- was so un Mac-like it made me cringe, but the utility of the application was undeniable.</p>\n<p>If I had a 12.9&quot; iPad I‚Äôd be tempted to be greedy and ask for vertical split panes so I could see two files at the same time (or multi-window usage as Textastic is working on), even if here on my 10.5&quot;, that would be a crazy idea. But the app is that productive that I‚Äôm almost beyond complaining about the basics and I‚Äôm starting to ask for more features. Multi-file search and replace would be good though.</p>\n<p>Development of the app seems to be continuing with several updates since iOS 13, so I hope it will continue apace. But this is heroic effort from yet another lone talented developer (so give them a break). The approach taken in this app, of leaning on OSS libraries and bridging them with custom code has allowed it‚Äôs feature count to leapfrog some other IDEs in the short term (take tag-closing or auto-suggest as an example), although as iOS11/12/13 has proved to many apps, staying away from the standard UIKit way of building the interface can quickly leave you behind when updates break your code. I hope that‚Äôs not the case here, there is some real pro-level functionality in this app, mixed in with some of the latest APIs (iOS13 &quot;edit in place&quot;, drag and drop, Siri Shortcuts).</p>\n<p>It‚Äôs well worth the $‚Ç¨¬£10. And I don‚Äôt often say this, but leave a good review on the app store, it seems to be lacking a bit of exposure compared with the other IDEs.</p>\n<p>I‚Äôm going to give it a go -- for a source controlled flat file project, it seems to be the whole package. It‚Äôs just‚Ä¶ idiosyncratic.</p>\n<h3 id=\"pros\">Pros <a class=\"direct-link\" href=\"#pros\">#</a></h3>\n<ul>\n<li>Integrated terminal</li>\n<li>Internal server &amp; browser for flat file preview, with live preview to external browsers.</li>\n<li>Access to remote cloud services (dropbox, Google Drive, Onedrive, FTP/SFTP)</li>\n<li>&quot;edit in place&quot; making it compatible with Git clients like Working Copy, and drag‚Äôn‚Äôdrop copying in and out of the file list.</li>\n<li>19 common themes (molokai, material, solarized, etc, plus the ability to make custom ones)</li>\n<li>Multi-caret editing</li>\n<li>Good tag completion and auto-suggesting from x symbols.</li>\n<li>Siri shortcuts with x-callback</li>\n</ul>\n<h3 id=\"cons\">Cons <a class=\"direct-link\" href=\"#cons\">#</a></h3>\n<ul>\n<li>&quot;Unusual&quot; user interface design.</li>\n<li>A little slow at returning to the foreground after iOS has killed it in the background.</li>\n<li>No multi-file search &amp; replace.</li>\n</ul>\n<h3 id=\"links\">Links <a class=\"direct-link\" href=\"#links\">#</a></h3>\n<ul>\n<li><a href=\"https://gocoedit.app/\">Link to GoCoEdit website</a></li>\n</ul>\n<aside class=\"aside--less\">\n<p>This is part of a review of the front-end webdev scene on iPad in 2019, detailing different methods to code in iPadOS. For the full list and more, click here. And be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n",
      "date_published": "2020-01-05T23:00:00+01:00"
    },{
      "id": "https://example.com/posts/2020-01-ipad-webdev19-cd-netlify/",
      "url": "https://example.com/posts/2020-01-ipad-webdev19-cd-netlify/",
      "title": "2019 iPad Webdev - CD with Netlify",
      "content_html": "<aside class=\"aside--less\">\n<p>This is part of a review of the front-end webdev scene on iPad in 2019, detailing different methods to code in iPadOS. For the full list and more, click here. And be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n<p>For web developers using an iPad, it‚Äôs best to think of this method as deploying your site to a VPS (virtual private server, a remote Linux account that you rent), without all that command line system administration nonsense. <a href=\"https://www.netlify.com/\">Netlify.com</a> can do the things your iPad is bad at (Node.js tool chains, web serving), without you having to ever SSH to a server.</p>\n<p>The process of getting code to pixels can be summed up as:</p>\n<ol>\n<li>checking out a repo and editing it on your iPad</li>\n<li>pushing the changes on you iPad back to GitHub/GitLab/BitBucket/etc</li>\n<li>somewhere in the cloud, the new change in a your repo triggers your tool chain to run and deploy the results to a web server.</li>\n</ol>\n<p>Netlify deploy status (in Safari -- on left) and Inspect Browser showing the deployed site (right)</p>\n<p>What we‚Äôre using (or &quot;creatively&quot; mis-using) is a Continuous Deployment (CD) system. CD is used to take the pain out of deploying to a staging or production server, the idea being that if the deploy is a simple switch ‚Äì instead of a long email requesting a sys-admin‚Äôs time ‚Äì there‚Äôs minimal friction stopping your site from being kept up-to-date and fresh.</p>\n<p>Netlify (among other services) wrap this CD service up with a web server and CDN, making the whole process as simple as signing up for one free (within limits) service.</p>\n<p>Although CD is generally used at a specific milestone ‚Äì for example you‚Äôve finished fiddling with the dev server and want to send it to staging ‚Äì there‚Äôs no reason why we can‚Äôt use it for the fiddling part. In effect, Netlify can be our development server.</p>\n<h3 id=\"how-to\">How to <a class=\"direct-link\" href=\"#how-to\">#</a></h3>\n<p>(using Netlify, but other CD providers would be similar)</p>\n<ol>\n<li>Have your project in one of the hosted Git services that Netlify works with (eg, GitHub, GitLab, BitBucket)</li>\n<li>Sign-up to Netlify, connect your new account to the hosted Git provider.</li>\n<li>In Netlify, select the project from your Git provider that you want to connect, the branch whose changes will trigger the deploy, the command line to run (eg gulp build), and the resulting folder of files to deploy to the web server.</li>\n<li>Back on your iPad, check out your project with your Git client (eg Working Copy), and either edit the files in that, or in a code editor.</li>\n<li>When you‚Äôve made a change you want to see the result of, commit and push it. This will trigger Netlify to run a deploy.</li>\n<li>Monitor your deploy in your Netlify account in Safari. Full deploy logs are available there for debugging.</li>\n</ol>\n<p>Build settings for a project in Netlify</p>\n<h3 id=\"in-practice\">In practice <a class=\"direct-link\" href=\"#in-practice\">#</a></h3>\n<p>I liked this method a lot. It was particularly good if you‚Äôre really mobile with only a sporadic internet connection ‚Äì I found myself making small gulpfile changes in Working Copy on my iPhone whilst travelling with my family on a bus, knowing that if I get 30 seconds in the next few miles, I could check if the deploy worked. You can change a line of code locally, commit and push and know some server somewhere isn‚Äôt reliant on your connection to it to do it‚Äôs job.</p>\n<p>Getting the first deploy on the server can take a while, but subsequent deploys are very quick; if not as instant as a local installation, they are generally closer to the speed of your toolchain rather than any latencies between servers.</p>\n<p>However it still adds one more step to a round trip. If I were running Gulp locally, it would be re-compiling as soon as I hit save. With the CD method here, you additionally need to commit (with a message unless you‚Äôre an animal) and push before you have the momentary wait to see the results.</p>\n<p>But the biggest problem I found was juggling all these elements constantly. I ended up with using Working Copy to push a change (and so trigger a deploy) and Textastic or GoCoEdit as the code editor, editing the files in Working Copy. On top of that I had two tabs or windows of Safari, one for viewing the resulting website, and one open with the Netlify deploy status, so I could be sure the deploy had succeeded and I was looking at the right version of the site.</p>\n<p>Working Copy (left), Textastic (center), two Safari windows (in slide-over -- right) with the deployed site and deploy status.</p>\n<p>I ended up with the code editor taking the most screen space, Working Copy docked to the left, and Safari in the slide-over window on the right so I could optionally view or dismiss it, and so I could rotate between the two Safari windows. It sort of worked ‚Äì but the cognitive load of four windows and how and when to view them made me miss the simplicity of old-fashioned windows. Removing one element would make it so much easier ‚Äì if I could push direct from any iOS editor without having to return to the Git client (nope), or if Netlify had an app that could just show a notification every time it deployed (nope). When I could, I just used the code editor in Working Copy ‚Äì if you‚Äôre doing some bug fixing and need a quick turn-around, I‚Äôd recommend it, but it‚Äôs not quite the right IDE for long coding projects (not yet, anyway?).</p>\n<h3 id=\"pros\">Pros <a class=\"direct-link\" href=\"#pros\">#</a></h3>\n<ul>\n<li>We get a server that can run our tooling and web server, all in one free (!) service.</li>\n<li>We never have to configure or upgrade that server (or even need to know how to)</li>\n<li>We have a very simple and reliable way of pushing new code to the server.</li>\n<li>Your connection to the internet doesn‚Äôt need to be super reliable or fast. Pushing changes to GitHub generally involves relatively small numbers of text files, and deploy progress can be monitored only when you choose to, as it all happens in the cloud.</li>\n</ul>\n<h3 id=\"cons\">Cons <a class=\"direct-link\" href=\"#cons\">#</a></h3>\n<ul>\n<li>You have to be online, at least enough to push Git commits.</li>\n<li>Your project needs to be a repo in GitHub/GitLab/BitBucket.</li>\n<li>You have to be ok with regularly pushing changes to a branch just to see the results of them, where you might normally be refining them before you push.</li>\n<li>Every code round-trip needs one additional step -- to commit and push the change.</li>\n<li>Not a responsive workflow if you‚Äôre constantly updating large files.</li>\n<li>As mentioned already, there‚Äôs quite a lot of windows to control, you need a code editor and a Git client on the iPad, and need at least two browser tabs for the Netlify deploy status and the deployed site.</li>\n</ul>\n<h3 id=\"optional-extras\">Optional extras <a class=\"direct-link\" href=\"#optional-extras\">#</a></h3>\n<ul>\n<li>You could add a CD process like Netlify on top of the <a href=\"https://medium.com/p/18f482f3a976\">VPS/Visual Code method</a>, where pushing a commit directly in VSCode triggers a deploy, but all the benefits of Netlify being simple would disappear as it would already be on top of managing your own server. You‚Äôd only want to do this if you wanted the server that VSCode sits on to act as the development server, and CD to be used more conventionally, ie to deploy to staging/prod only once you‚Äôre happy for your dev code to be demonstrated to a wider audience.</li>\n<li>If you‚Äôre looking for a simple, reliable, secure blog workflow, this seems to be the perfect method to write your content in a markdown editor like <a href=\"https://ia.net/writer\">iA Writer</a> and use a framework like <a href=\"https://gohugo.io/\">Hugo.js</a> to publish it. You can even collaborate with others on an &quot;editing&quot; branch in Git before you merge with the branch that would trigger the publishing to Netlify.</li>\n</ul>\n<h3 id=\"links\">Links <a class=\"direct-link\" href=\"#links\">#</a></h3>\n<ul>\n<li><a href=\"https://www.netlify.com/\">Netlify.com</a></li>\n<li><a href=\"https://twitter.com/PaulGowder/status/1200927136594513920\">Paul Gowder enthusing about this method on Twitter</a></li>\n</ul>\n<aside class=\"aside--less aside--bottom\">\n<p>This is part of a review of the front-end webdev scene on iPad in 2019, detailing different methods to code in iPadOS. For the full list and more, click here. And be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n",
      "date_published": "2020-01-05T23:00:00+01:00"
    },{
      "id": "https://example.com/posts/2020-01-ipad-webdev19/",
      "url": "https://example.com/posts/2020-01-ipad-webdev19/",
      "title": "FE webdev on iPad (2019)",
      "content_html": "<aside class=\"aside--less\">\n<p>Be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n<p>What a difference a year makes.</p>\n<p>Last year I lead the 2018 round-up by saying that I could not recommend iOS for doing front-end web-dev unless your project fitted a very narrow list of criteria. A year later and that list of use-cases is not only wider, but the work you can get done is far deeper. We‚Äôre getting there.</p>\n<p>What has changed has been a combination of things. iPadOS has ‚Äì for sure ‚Äì solved a lot of the fundamental problems that previously infuriated the simplest of workflows. But apps (almost exclusively one-person indie apps) have been incrementally developing to fill the gaps, and the innovative workflows discovered by iPad users have been pretty amazing.</p>\n<p>Don‚Äôt be fooled ‚Äì if I was coming to this platform for the first time as a professional web developer, I would still find iOS extremely limited and frustrating. But having seen where we‚Äôve come from, I‚Äôm much more positive about the future.</p>\n<p>This is a journey that ‚Äì as yet ‚Äì still has no clear destination. But it‚Äôs getting more pleasant by the month.</p>\n<p>GoCoEdit and a Brydge 10.5&quot; (the best keyboard for using on your lap)</p>\n<h3 id=\"hardware\">Hardware <a class=\"direct-link\" href=\"#hardware\">#</a></h3>\n<p>In 2019, the regular iPads have essentially jumped a tier. All non-pro iPads are now different price-point compromises of the old 10.5&quot; pro, with out-of-the-box keyboard and pen support. The 2019 iPad Air in particular is a Pro in all but name, but they are all &quot;real-work&quot; ready.</p>\n<p>In the iPad Pro range, the top-end has remained unchanged. Or has it? Because the promised USB-C ecosystem is finally emerging and has collided with the new iPadOS. You can now plug your iPad into 5k monitors, hard drives, mice, microphones, USB-sticks, Raspberry Pis, plus a multitude of cheap, powerful, compact power supplies. And with either store-shelf or iPad-bespoke hubs, even with several peripherals at the same time. Your year-old iPad Pro had a free hardware upgrade in 2019.</p>\n<p>Felt iPad carry case with dongles (HDMI, USB3.0, SD card) and Moko foldable stand.</p>\n<h3 id=\"ios-is-forked-for-the-ipad\">iOS is forked for the iPad <a class=\"direct-link\" href=\"#ios-is-forked-for-the-ipad\">#</a></h3>\n<p>iPadOS13 made the biggest difference to our ability to get things done this year. We‚Äôve already talked about how the USB-C IO upgrades were nice for those with the latest iPad Pros. And the files app finally understands that you need to get files on and off your iPad in multiple ways. So many smaller details have made life easier for a developer, from the icons not re-arranging on rotating the screen, to Siri shortcuts being supercharged, to no-lag text selection, to keyboard commands everywhere.</p>\n<p>But the biggest plus is the new Safari, not just purely for it‚Äôs &quot;desktop class browsing&quot; but because of the multitude of online tools that this has enabled. From <a href=\"https://www.atlassian.com/software/jira\">Jira</a> and <a href=\"https://analytics.google.com/\">Google Analytics</a> to <a href=\"https://glitch.com/\">glitch.com</a> and the hosted version of Visual Code, it‚Äôs made the iPad exponentially more capable. It‚Äôs like suddenly getting 80% of a ChromeOS tablet on top of your iPad.</p>\n<p>Not everything is super rosey. The multi-tasking is powerful but cognitively taxing. The sandboxing means that apps still have to jump through crazy hoops to work together in a logical way. Background processes are still killed ridiculously early. iPad Pro RAM is unrealistically low compared to the cheapest of laptops. The command line is still <em>verboten</em>. App Store rules are still vague and punitive.</p>\n<p>A reminder to myself.</p>\n<h3 id=\"one-browser%2C-and-still-only-one\">One browser, and still only one <a class=\"direct-link\" href=\"#one-browser%2C-and-still-only-one\">#</a></h3>\n<p>One thing that didn‚Äôt change this year was the range of browsers on the platform. WebKit is still the only rendering engine available on iOS, Safari still has no devtools and you still can‚Äôt have Safari Technical Preview on iOS.</p>\n<p>The <a href=\"https://twitter.com/slightlylate\">Google engineer Alex Russell</a> has strong views on Safari and iOS ‚Äì and a lot of fan boys (like me) can get twitter-rage as a response. But although I might not always agree, I like Alex. Not only is he smart but he backs up points with data, and that should always deserve your consideration, whether you agree with his conclusions or not.</p>\n<p>And on one point, Alex is always right. Having one browser engine on iOS is a mistake. Quite apart from being an anti-trust suit in the waiting, the entire web capability of the platform is locked down to the decisions made in a single meeting room in Cupertino. Fairs fair, that weekly backlog meeting of project managers pretty much delivered the mobile web -- fully formed -- back in 2007 and has continued to push it forward. But now it‚Äôs time to let others have a competing voice.</p>\n<p>If we also had Chromium on iOS, we wouldn‚Äôt be celebrating finally using &quot;real&quot; GoogleDocs in 2019, because we‚Äôd have had it years ago. We might also have 4K YouTube and devtools. And so would Safari, probably (because; competition). All of that would mean selling more iPads to pros. And Safari would still rule for most iPad users because even for a default it‚Äôs capable, fast, has low battery consumption, and it‚Äôs the webview in every single social app that you own. Do it, you cowards (it‚Äôs a meme, I don‚Äôt really talk or think like that).</p>\n<p>We live in an imperfect world. The 9 month old crack on my 10.5&quot;. At least it‚Äôs undetectable by touch over most of the screen. Here‚Äôs hoping the 2020 iPad Pro is coming soon.</p>\n<h3 id=\"methods-to-develop-sites-on-ipad\">Methods to develop sites on iPad <a class=\"direct-link\" href=\"#methods-to-develop-sites-on-ipad\">#</a></h3>\n<p>Enough of the fundamentals. Let‚Äôs take some apps, some projects in source control, and mash them up into a workflow.</p>\n<p>There are plenty of apps that carry out individual parts of a developer‚Äôs workflow just fine. This ‚Äì after all ‚Äì is how you often string together a workflow on a desktop OS; an editor, a browser, a git client, a server, etc. But iOS constraints mean single-function apps are often not productive. This is because if you need more than two apps in your flow, one will need to be in the background ‚Äì at least part of the time ‚Äì and background apps are killed ruthlessly after 3 minutes. This has lead to apps often having second or third talents that are best not to kill unexpectedly; for example editor apps having a terminal, or web server, or most often ‚Äì both. It means one or two apps can stay in the foreground whilst they carry out the functions of many.</p>\n<p>Killing background processes is an artificial constraint of the OS ‚Äì iPads are no longer the resource constrained devices they used to be, so it would be good if Apple allowed more categories of apps to remain in the background in some way like audio apps can.</p>\n<p>Next we also need apps to open files via the OS level &quot;edit in place&quot; API so that an IDE can work directly on files in a local repo (and just to be difficult, this API changed in iOS13, so any app that previously supported it needs an update). I consider this the basic requirement now of any pro app.</p>\n<p>Microsoft VS Code running plug-ins on an iPad? Well, yes - kind of.</p>\n<p>The following list of workflows is absolutely not a prescription for the best ways of working, or even to scratch the breadth of ways to do front-end web development on an iPad. Like last year, consider them recipes ‚Äì a little light inspiration to consider remixing to your own taste.</p>\n<p>And because they deserve they‚Äôre own space to understand their pros and cons, each is linked to their own article or screencast.</p>\n<ul>\n<li>\n<p>Working with a remote server or Virtual Private Server (VPS)</p>\n</li>\n<li>\n<p>One way to get around iOS not running a a command line and a front-end tool chain like Node.js, is to work with a server hosted elsewhere. This results in workflows that are based around a remote server or a VPS.</p>\n</li>\n<li>\n<p>Full review: VPS, Microsoft VS Code (Hosted version), remote Git</p>\n</li>\n<li>\n<p>VPS, Emacs, remote Git (I don‚Äôt have much to say apart from use Blink and Mosh, they‚Äôre awesome)</p>\n</li>\n<li>\n<p>Full review: Continuous Deployment with Netlify, Github hooks, Working Copy, Textastic</p>\n</li>\n<li>\n<p>Full review: AWS S3, Panic Coda</p>\n</li>\n<li>\n<p>Screencast from 2018: VPS, Working Copy, Textastic (using Textastic to manually-upload)</p>\n</li>\n<li>\n<p>Screencast from 2018: VPS, Working Copy, Textastic (using Working Copy to auto-upload)</p>\n</li>\n<li>\n<p>Raspberry Pi 3B+ with Anker 10Ah battery pack. Pilot biro grip on the Apple Pencil.</p>\n</li>\n<li>\n<p>Working on a semi-remote server</p>\n</li>\n<li>\n<p>Full review: Raspberry Pi as a replacement for a VPS.</p>\n</li>\n<li>\n<p>Working fully local on the iPad</p>\n</li>\n<li>\n<p>Full review: Node.js/React: Working Copy, Play.js</p>\n</li>\n<li>\n<p>Full review: Flat websites: Working Copy, GoCoEdit<br>\nScreencast from 2018: Flat websites: Working Copy (preview server), Textastic</p>\n</li>\n<li>\n<p>Screencast from 2018: Flat websites: Working Copy (webDAV server), Textastic</p>\n</li>\n<li>\n<p>Screencast from 2018: Flat websites: Textastic (preview server)</p>\n</li>\n<li>\n<p>Screencast from 2018: Flat websites: Panic Coda (preview server)</p>\n</li>\n</ul>\n<p>MacBook Pro 13&quot; 2014, MacBook Air 2019, MacBook Air 11&quot; 2011, iPad Pro 10.5&quot;. Which is fastest?</p>\n<h3 id=\"honourable-mentions\">Honourable mentions <a class=\"direct-link\" href=\"#honourable-mentions\">#</a></h3>\n<p>There are a few other apps that have caught my eye this year, and are worth mentioning. I‚Äôm sure you could probably add many more for particular areas you work in ‚Äì for instance there is a huge range of dedicated GitHub apps that let you monitor pull-requests and the like, documentation apps like <a href=\"https://kapeli.com/dash_ios\">Dash</a>, and full IDEs for languages such as Python (<a href=\"http://omz-software.com/pythonista/\">Pythonista</a>) and PHP (<a href=\"https://solesignal.com/draftcode/\">Draftcode</a>).</p>\n<ul>\n<li><a href=\"https://workingcopyapp.com/\">Working Copy</a>: still the best Git client on iOS, thankfully the most accomplished at integrating all the latest iOS APIs, because it‚Äôs the hub of most web-dev work on the iPad.</li>\n<li><a href=\"https://secureshellfish.app/\">Secure Shellfish</a>: from the developer of Working Copy, it makes SFTP servers appear as if they were just another drive in your Files app (or your app file picker).</li>\n<li><a href=\"https://apps.pdyn.net/inspect/\">Inspect browser</a>: The closest thing to Chrome dev-tools you‚Äôll get on iOS, and getting closer all the time.</li>\n<li><a href=\"https://termius.com/\">Termius</a>, <a href=\"https://www.blink.sh/\">Blink</a>: Termius is the SSH tool for cross platform pros that prefer a GUI. Blink is for the genuine command line geeks who never want to see as much as a button, and is freakishly good at keeping a Mosh connection open -- it defies explanation.</li>\n<li><a href=\"https://kodex.app/\">Kodex</a>: A great standalone code editor. It doesn‚Äôt really fit any of my work (yet), but it‚Äôs has promise.</li>\n</ul>\n<p>Play.js running a web React project, with it‚Äôs browser showing the result on the right. This really is Node.js running locally on iPadOS -- a major step forward.</p>\n<h3 id=\"what-we%E2%80%99re-missing\">What we‚Äôre missing <a class=\"direct-link\" href=\"#what-we%E2%80%99re-missing\">#</a></h3>\n<p>Play.js might have finally brought Node.js and React (web) development to iOS, but it‚Äôs not (yet) a replacement for other tool chains. There‚Äôs still no way of locally running Gulp, Grunt, Rollup, Vue, Docker, K8s, etc, on an iPad, and that‚Äôs a lot of holes. If you need any of these, you‚Äôll currently need to think about something like a VPS.</p>\n<p>In the IDE apps, we‚Äôre still missing the basic capability of multi-file text search/replace. After all, the hardest task in programming is naming things. The tag-complete/auto-suggest is of variable quality across IDEs and app extension systems will not get traction on the platform if it remains this small (Coda had one, unfortunately it didn‚Äôt have many plug-ins).</p>\n<p>All of the above things do exist in the hosted version of VS Code, as detailed above, largely because it all happens remotely on a Linux server. However it also comes with its own drawbacks ‚Äì not least not currently having any keyboard shortcuts.</p>\n<p>But at least we‚Äôre getting there in the IDE space. When it comes to Browser developer tools, we‚Äôre still a way off. The great <a href=\"https://apps.pdyn.net/inspect/\">Inspect Browser</a> is still gaining new functionality steadily, but we‚Äôre still a long way from having the same insight into what a web page is doing like we have on desktop. In particular, we‚Äôre missing perf tools, heap measurements, JS debugger, indexedDB storage viewing, PWA tools, code line references in console logs, and more.</p>\n<p>Don‚Äôt feel locked into landscape mode -- the iPad is more flexible than that. (Textastic on screen)</p>\n<h3 id=\"%22the-ios-way%22\">&quot;the iOS way&quot; <a class=\"direct-link\" href=\"#%22the-ios-way%22\">#</a></h3>\n<p>Apple still doesn‚Äôt appear to see the web development industry as part of the &quot;Pro&quot; in iPad Pro. They continue to lay obstructions that discourage web developers to do much more than dabble in iOS. This is never better demonstrated than by Carlos Vidal, the author of the Play.js app where he describes the struggle to build a web development IDE, with NPM:</p>\n<blockquote>\n<p>On top of this, in an attempt to support most of the npm features, Apple threw away the work of two months by rejecting the binary and asking me to go back to the drawing board and offer that experience &quot;the iOS way&quot;. (footnote 1)</p>\n</blockquote>\n<p>Play.js is the closest thing to a local Node.js/NPM environment on iOS, and does it in a way that‚Äôs very far from carrying out <code>brew install</code> and <code>npm i</code> at a bash prompt. Write a package.json file, hit &quot;play&quot; and it‚Äôll do the rest ‚Äì it‚Äôs as close to the iOS way as you could be with a Node.js project.</p>\n<p>The positive person in me says that this hard-arse stance has actually led to new ways of looking at workflows that we never even considered reevaluating before. Play.js is the embodiment of this.</p>\n<p>Alternatively you could ask what the kind of direction is that to give. Leaving enigmatic platitudes that provide no guidance as an epitaph to months of work is not exactly going to inspire a generation of after-work app developers to enable a thriving industry and ‚Äì in conclusion ‚Äì sell more iPads. &quot;Help us to help you&quot;, I would plead to Apple.</p>\n<p>On the charger in our hall. its just a bread bin with some holes and a three-way socket inside.</p>\n<h3 id=\"conclusion%2C-and-the-question-remains.\">Conclusion, and the question remains. <a class=\"direct-link\" href=\"#conclusion%2C-and-the-question-remains.\">#</a></h3>\n<p>So with all this hassle, let‚Äôs be honest, making iOS a webdev platform is still pushing at boundaries that don‚Äôt necessarily have a need to be pushed.</p>\n<p>The latest generation of powerful ultra-light notebooks with familiar desktop OS‚Äôs (Windows, Mac, Linux) would allow you to drop your existing workflow straight into a more portable world.</p>\n<p>Microsoft Surface (or similiar) devices would give you a transformable tablet that had a heavyweight OS. <a href=\"https://www.howtogeek.com/424886/windows-10s-linux-kernel-is-now-available/\">Microsoft has embraced Linux</a> in an extraordinary way in 2019, allowing you to marry .NET development with node/NPM based front-end pipelines on a single device.</p>\n<p><a href=\"https://youtu.be/3CWUAisN-vo\">Google Chrome OS has actively courted web developers</a> with an impressive Linux based flow (Docker/Kubernates? no problem). The <a href=\"https://www.google.com/chromebook/device/google-pixelbook/\">Google Pixel</a> is still attractive, even if most ChromeOS hardware is cheap &amp; education orientated and their experiment in building a convertible slate has had <a href=\"https://youtu.be/HOh6d_r63Bw\">crushingly bad reviews</a>.</p>\n<p>So with all these alternative options already available, the question remains. Why bother trying to stretch the envelope of iOS to do web development when even Apple seem to be actively discouraging it?</p>\n<p>It‚Äôs not an easy one to logically explain away. But I find it a pleasure to use an iPad. It‚Äôs genuinely light, connected and increasingly capable of most tasks, plus Windows and ChromeOS (and their app ecosystems) suck at being tablets. So if the iPad is my preferred device to grab and go ‚Äì whether to the Coffee shop or Columbia ‚Äì why would I want to also take another computer on the off-chance I need to fix a bug and re-deploy, or even build that project from scratch that I‚Äôve been itching to try? My iPad is definitely powerful enough, so why not?</p>\n<p>The truth is that most good ideas in tech were just fanboys playing around with what were considered &quot;bad&quot; ideas, until they reached a tipping point and suddenly everyone was doing it. So who‚Äôs to say we don‚Äôt discover a &quot;new norm&quot; here? God knows we could do with rethinking web-dev tooling and abstracting some of it away. That‚Äôs exactly what play.js has done.</p>\n<p>This could still be an evolutionary dead-end ‚Äì but we don‚Äôt know that until we push and see how far we get. And with the progress I‚Äôve seen in the last few years, I believe we could soon see a point when Apple understands what the iPad‚Äôs place is in this industry (just as they did with writing, photography and film).</p>\n<p>If that happens, all bets are off.</p>\n<h3 id=\"links\">Links <a class=\"direct-link\" href=\"#links\">#</a></h3>\n<ul>\n<li><a href=\"https://christine.website/blog/coding-on-an-ipad-2018-04-14-2018\">Christine Dodrill‚Äôs 2018 article on Emacs and Textastic on the iPad</a></li>\n<li><a href=\"https://link.medium.com/J1C6zSKgU2\">Shane Dowling‚Äôs 2018 article on using GoCoEdit, Vim &amp; Emacs on the iPad</a></li>\n<li><a href=\"https://jann.is/ipad-pro-for-programming/\">Jannis Hermanns 2017 article on developing remotely with an iPad</a></li>\n<li><a href=\"http://typicalprogrammer.com/working-on-an-ipad-pro-as-my-main-computer\">Greg Jorgensen‚Äôs 2018 article about coding on the iPad‚Ä¶</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=16741522\">‚Ä¶ and the Hacker News thread it resulted in.</a></li>\n<li><a href=\"https://reddit.com/r/iPadPro\">iPad Pro Reddit</a></li>\n<li><a href=\"https://stories.appbot.co/hey-apple-i-tried-the-ipad-pro-as-a-dev-machine-its-almost-awesome-830e424bbed3\">Stuart Hall‚Äôs 2016 article that started it all off (for me)</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCT-GpMtIFhX9EMA0Eauevhw\">Tech Craft YouTube channel, covering Pro iPad usage</a></li>\n<li><a href=\"https://ipadpros.net/\">iPadPros Podcast</a></li>\n<li><a href=\"https://theuntitledsite.com/\">Christopher Lawley‚Äôs tech/YouTube blog &quot;The untitled site&quot;, which often covers coding on the iPad</a></li>\n<li><a href=\"https://medium.com/@pixelthing/a-perfect-ipad-keyboard-doesnt-exist-a4cbcc127bfa\">My own article on the tricky business of choosing an iPad keyboard</a></li>\n</ul>\n<p>Apple Magic Keyboard in a Fintie wrap &amp; stand with an iPad Pro 10.5&quot;</p>\n<h3 id=\"footnotes\">Footnotes <a class=\"direct-link\" href=\"#footnotes\">#</a></h3>\n<p>Quote is directly taken from a Patreon page which is not currently live on the web -- but is reproduced with kind permission from the author.</p>\n<aside class=\"aside--less aside--bottom\">\n<p>Be sure to check out the 2020 version of front-end web dev on iPad.</p>\n</aside>\n",
      "date_published": "2020-01-04T23:00:00+01:00"
    }
  ]
}
